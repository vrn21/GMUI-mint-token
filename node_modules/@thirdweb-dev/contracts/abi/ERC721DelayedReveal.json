{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_royaltyBps",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "prevURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "ContractURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRoyaltyBps",
          "type": "uint256"
        }
      ],
      "name": "DefaultRoyalty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "restriction",
          "type": "bool"
        }
      ],
      "name": "OperatorRestriction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "prevOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyForToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "name": "TokenURIRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantityClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "startTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedBaseURI",
          "type": "bytes"
        }
      ],
      "name": "TokensLazyMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OPERATOR_FILTER_REGISTRY",
      "outputs": [
        {
          "internalType": "contract IOperatorFilterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "key",
          "type": "bytes"
        }
      ],
      "name": "encryptDecrypt",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "encryptedData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseURICount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_key",
          "type": "bytes"
        }
      ],
      "name": "getRevealURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoForToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchId",
          "type": "uint256"
        }
      ],
      "name": "isEncryptedBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_baseURIForTokens",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "lazyMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenIdToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorRestriction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_key",
          "type": "bytes"
        }
      ],
      "name": "reveal",
      "outputs": [
        {
          "internalType": "string",
          "name": "revealedURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_royaltyBps",
          "type": "uint256"
        }
      ],
      "name": "setDefaultRoyaltyInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_restriction",
          "type": "bool"
        }
      ],
      "name": "setOperatorRestriction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bps",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyInfoForToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscription",
          "type": "address"
        }
      ],
      "name": "subscribeToRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "verifyClaim",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b5060405162003856380380620038568339810160408190526200003491620004d8565b8484848484733cc6cdda760b79bafa08df41ecfa224f810dceb66001858581600290805190602001906200006a92919062000348565b5080516200008090600390602084019062000348565b50506000805550620000938282620000d6565b50506001601055620000a58562000204565b620000ba826001600160801b03831662000256565b620000c6600162000301565b50505050505050505050620005c8565b6daaeb6d7670e522a718067333cd4e3b1562000200576001600160a01b0382163b15620001b95780156200017857604051633e9f1edf60e11b81523060048201526001600160a01b03831660248201526daaeb6d7670e522a718067333cd4e90637d3e3dbe906044015b600060405180830381600087803b1580156200015b57600080fd5b505af115801562000170573d6000803e3d6000fd5b505050505050565b60405163a0af290360e01b81523060048201526001600160a01b03831660248201526daaeb6d7670e522a718067333cd4e9063a0af29039060440162000140565b604051632210724360e11b81523060048201526daaeb6d7670e522a718067333cd4e90634420e48690602401600060405180830381600087803b1580156200015b57600080fd5b5050565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6127108111156200029f5760405162461bcd60e51b815260206004820152600f60248201526e45786365656473206d61782062707360881b604482015260640160405180910390fd5b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b600f805460ff19168215159081179091556040519081527f38475885990d8dfe9ca01f0ef160a1b5514426eab9ddbc953a3353410ba780969060200160405180910390a150565b82805462000356906200058b565b90600052602060002090601f0160209004810192826200037a5760008555620003c5565b82601f106200039557805160ff1916838001178555620003c5565b82800160010185558215620003c5579182015b82811115620003c5578251825591602001919060010190620003a8565b50620003d3929150620003d7565b5090565b5b80821115620003d35760008155600101620003d8565b80516001600160a01b03811681146200040657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200043357600080fd5b81516001600160401b03808211156200045057620004506200040b565b604051601f8301601f19908116603f011681019082821181831017156200047b576200047b6200040b565b816040528381526020925086838588010111156200049857600080fd5b600091505b83821015620004bc57858201830151818301840152908201906200049d565b83821115620004ce5760008385830101525b9695505050505050565b600080600080600060a08688031215620004f157600080fd5b620004fc86620003ee565b60208701519095506001600160401b03808211156200051a57600080fd5b6200052889838a0162000421565b955060408801519150808211156200053f57600080fd5b506200054e8882890162000421565b9350506200055f60608701620003ee565b60808701519092506001600160801b03811681146200057d57600080fd5b809150509295509295909350565b600181811c90821680620005a057607f821691505b60208210811415620005c257634e487b7160e01b600052602260045260246000fd5b50919050565b61327e80620005d86000396000f3fe6080604052600436106101e65760003560e01c80636352211e116101095780636352211e146104c557806363b45e2d146104e557806370a08231146104fa5780638da5cb5b1461051a578063938e3d7b1461052f57806395d89b411461054f5780639bcf7a15146105645780639fc4d68f14610584578063a05112fc146105a4578063a22cb465146105c4578063aad3ec96146105e4578063ac9650d8146105f7578063acd083f814610624578063b24f2d3914610639578063b88d4fde14610664578063c87b56dd14610684578063ce805642146106a4578063d37c353b146106c4578063e7150322146106e4578063e8a3d48514610704578063e985e9c51461071957600080fd5b806301ffc9a7146101eb57806306fdde0314610220578063081812fc14610242578063095ea7b31461026f57806313af40351461029157806318160ddd146102b157806323b872dd146102d45780632419f51b146102f45780632a55205a146103145780632f92023a1461035357806332f0cd64146103725780633b1475a71461039257806341f43434146103a757806342842e0e146103c957806342966c68146103e9578063492e224b146104095780634cc157df14610429578063504c6e011461046b57806357fd845514610485578063600dd5ea146104a5575b600080fd5b3480156101f757600080fd5b5061020b6102063660046127f1565b610762565b60405190151581526020015b60405180910390f35b34801561022c57600080fd5b506102356107cf565b6040516102179190612866565b34801561024e57600080fd5b5061026261025d366004612879565b610861565b6040516102179190612892565b34801561027b57600080fd5b5061028f61028a3660046128c2565b6108a5565b005b34801561029d57600080fd5b5061028f6102ac3660046128ec565b6108be565b3480156102bd57600080fd5b50600154600054035b604051908152602001610217565b3480156102e057600080fd5b5061028f6102ef366004612907565b6108f7565b34801561030057600080fd5b506102c661030f366004612879565b610922565b34801561032057600080fd5b5061033461032f366004612943565b610990565b604080516001600160a01b039093168352602083019190915201610217565b34801561035f57600080fd5b5061028f61036e3660046128c2565b5050565b34801561037e57600080fd5b5061028f61038d366004612973565b6109cd565b34801561039e57600080fd5b50600e546102c6565b3480156103b357600080fd5b506102626daaeb6d7670e522a718067333cd4e81565b3480156103d557600080fd5b5061028f6103e4366004612907565b610a3e565b3480156103f557600080fd5b5061028f610404366004612879565b610a63565b34801561041557600080fd5b5061020b610424366004612879565b610a6e565b34801561043557600080fd5b50610449610444366004612879565b610a94565b604080516001600160a01b03909316835261ffff909116602083015201610217565b34801561047757600080fd5b50600f5461020b9060ff1681565b34801561049157600080fd5b5061028f6104a03660046128ec565b610aff565b3480156104b157600080fd5b5061028f6104c03660046128c2565b610b6f565b3480156104d157600080fd5b506102626104e0366004612879565b610b9d565b3480156104f157600080fd5b50600c546102c6565b34801561050657600080fd5b506102c66105153660046128ec565b610baf565b34801561052657600080fd5b50610262610bfd565b34801561053b57600080fd5b5061028f61054a366004612a3b565b610c0c565b34801561055b57600080fd5b50610235610c39565b34801561057057600080fd5b5061028f61057f366004612a83565b610c48565b34801561059057600080fd5b5061023561059f366004612af0565b610c77565b3480156105b057600080fd5b506102356105bf366004612879565b610df8565b3480156105d057600080fd5b5061028f6105df366004612b3b565b610e92565b61028f6105f23660046128c2565b610ea6565b34801561060357600080fd5b50610617610612366004612b72565b610fc3565b6040516102179190612be6565b34801561063057600080fd5b506000546102c6565b34801561064557600080fd5b50600a546001600160a01b03811690600160a01b900461ffff16610449565b34801561067057600080fd5b5061028f61067f366004612c68565b6110b7565b34801561069057600080fd5b5061023561069f366004612879565b6110e4565b3480156106b057600080fd5b506102356106bf366004612af0565b611153565b3480156106d057600080fd5b506102c66106df366004612ccf565b6111f6565b3480156106f057600080fd5b506102356106ff366004612d48565b61128e565b34801561071057600080fd5b50610235611303565b34801561072557600080fd5b5061020b610734366004612da3565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006301ffc9a760e01b6001600160e01b03198316148061079357506380ac58cd60e01b6001600160e01b03198316145b806107ae5750635b5e139f60e01b6001600160e01b03198316145b806107c957506001600160e01b0319821663152a902d60e11b145b92915050565b6060600280546107de90612dd6565b80601f016020809104026020016040519081016040528092919081815260200182805461080a90612dd6565b80156108575780601f1061082c57610100808354040283529160200191610857565b820191906000526020600020905b81548152906001019060200180831161083a57829003601f168201915b5050505050905090565b600061086c82611310565b610889576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b816108af8161133b565b6108b983836113ee565b505050565b6108c6611470565b6108eb5760405162461bcd60e51b81526004016108e290612e11565b60405180910390fd5b6108f481611493565b50565b826001600160a01b0381163314610911576109113361133b565b61091c8484846114e5565b50505050565b600061092d600c5490565b821061096b5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064016108e2565b600c828154811061097e5761097e612e39565b90600052602060002001549050919050565b60008060008061099f86610a94565b90945084925061ffff1690506127106109b88287612e65565b6109c29190612e9a565b925050509250929050565b6109d5611470565b610a355760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420617574686f72697a656420746f20736574206f70657261746f72207260448201526a32b9ba3934b1ba34b7b71760a91b60648201526084016108e2565b6108f4816114f0565b826001600160a01b0381163314610a5857610a583361133b565b61091c848484611537565b6108f4816001611552565b60008181526011602052604081208054829190610a8a90612dd6565b9050119050919050565b6000818152600b60209081526040808320815180830190925280546001600160a01b031680835260019091015492820192909252829115610adb5780516020820151610af5565b600a546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b610b07611470565b610b645760405162461bcd60e51b815260206004820152602860248201527f4e6f7420617574686f72697a656420746f2073756273637269626520746f207260448201526732b3b4b9ba393c9760c11b60648201526084016108e2565b6108f4816001611701565b610b77611470565b610b935760405162461bcd60e51b81526004016108e290612e11565b61036e82826117f9565b6000610ba88261187d565b5192915050565b60006001600160a01b038216610bd8576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6009546001600160a01b031690565b610c14611470565b610c305760405162461bcd60e51b81526004016108e290612e11565b6108f481611997565b6060600380546107de90612dd6565b610c50611470565b610c6c5760405162461bcd60e51b81526004016108e290612e11565b6108b9838383611a79565b600083815260116020526040812080546060929190610c9590612dd6565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc190612dd6565b8015610d0e5780601f10610ce357610100808354040283529160200191610d0e565b820191906000526020600020905b815481529060010190602001808311610cf157829003601f168201915b50505050509050805160001415610d5b5760405162461bcd60e51b8152602060048201526011602482015270139bdd1a1a5b99c81d1bc81c995d99585b607a1b60448201526064016108e2565b60008082806020019051810190610d729190612eae565b91509150610d8182878761128e565b93508084878746604051602001610d9b9493929190612f2e565b6040516020818303038152906040528051906020012014610dee5760405162461bcd60e51b815260206004820152600d60248201526c496e636f7272656374206b657960981b60448201526064016108e2565b5050509392505050565b60116020526000908152604090208054610e1190612dd6565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3d90612dd6565b8015610e8a5780601f10610e5f57610100808354040283529160200191610e8a565b820191906000526020600020905b815481529060010190602001808311610e6d57829003601f168201915b505050505081565b81610e9c8161133b565b6108b98383611b20565b60026010541415610ef95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108e2565b6002601055600e54600054610f0f908390612f57565b1115610f5d5760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420656e6f756768206c617a79206d696e74656420746f6b656e732e000060448201526064016108e2565b6000610f698383611bb6565b905080836001600160a01b0316336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de685604051610fb191815260200190565b60405180910390a45050600160105550565b6060816001600160401b03811115610fdd57610fdd612990565b60405190808252806020026020018201604052801561101057816020015b6060815260200190600190039081610ffb5790505b50905060005b828110156110b0576110803085858481811061103457611034612e39565b90506020028101906110469190612f6f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bc392505050565b82828151811061109257611092612e39565b602002602001018190525080806110a890612fb5565b915050611016565b5092915050565b836001600160a01b03811633146110d1576110d13361133b565b6110dd85858585611bef565b5050505050565b606060006110f183611c3a565b50905060006110ff84611d3f565b905061110a82610a6e565b1561113857806040516020016111209190612fd0565b60405160208183030381529060405292505050919050565b8061114285611ea0565b604051602001611120929190612ff5565b606061115d611470565b6111795760405162461bcd60e51b81526004016108e290612e11565b600061118485610922565b9050611191818585610c77565b91506111ac8160405180602001604052806000815250611fa5565b6111b68183611fc4565b847f6df1d8db2a036436ffe0b2d1833f2c5f1e624818dfce2578c0faa4b83ef9998d836040516111e69190612866565b60405180910390a2509392505050565b600081156112775760008061120d84860186613024565b91509150815160001415801561122257508015155b156112745761127488600e546112389190612f57565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fa592505050565b50505b6112848686868686611fe3565b9695505050505050565b8251604080518083016020019091528181529060005b818110156112fa5760008585836040516020016112c393929190613068565b60408051601f198184030181529190528051602091820120888401820151188584018201526112f3915082612f57565b90506112a4565b50509392505050565b60088054610e1190612dd6565b60008054821080156107c9575050600090815260046020526040902054600160e01b900460ff161590565b600f5460ff16156108f4576daaeb6d7670e522a718067333cd4e3b156108f457604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c61711349061138e903090859060040161307a565b602060405180830381865afa1580156113ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cf9190613094565b6108f45780604051633b79c77360e21b81526004016108e29190612892565b60006113f982610b9d565b9050806001600160a01b0316836001600160a01b0316141561142e5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614611465576114488133610734565b611465576040516367d9dca160e11b815260040160405180910390fd5b6108b98383836120ed565b600061147a610bfd565b6001600160a01b0316336001600160a01b031614905090565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6108b9838383612149565b600f805460ff19168215159081179091556040519081527f38475885990d8dfe9ca01f0ef160a1b5514426eab9ddbc953a3353410ba780969060200160405180910390a150565b6108b9838383604051806020016040528060008152506110b7565b600061155d8361187d565b805190915082156115c3576000336001600160a01b038316148061158657506115868233610734565b806115a157503361159686610861565b6001600160a01b0316145b9050806115c157604051632ce44b5f60e11b815260040160405180910390fd5b505b6115cf600085836120ed565b6001600160a01b0380821660008181526005602090815260408083208054600160801b6000196001600160401b038084169190910181166001600160401b03198416811783900482166001908101831690930267ffffffffffffffff67ffffffffffffffff60801b0119909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b1785559189018084529220805491949091166116c95760005482146116c957805460208701516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b03841690600080516020613229833981519152908390a4505060018054810190555050565b6daaeb6d7670e522a718067333cd4e3b1561036e576001600160a01b0382163b156117c857801561179557604051633e9f1edf60e11b81526daaeb6d7670e522a718067333cd4e90637d3e3dbe9061175f903090869060040161307a565b600060405180830381600087803b15801561177957600080fd5b505af115801561178d573d6000803e3d6000fd5b505050505050565b60405163a0af290360e01b81526daaeb6d7670e522a718067333cd4e9063a0af29039061175f903090869060040161307a565b604051632210724360e11b81526daaeb6d7670e522a718067333cd4e90634420e4869061175f903090600401612892565b61271081111561181b5760405162461bcd60e51b81526004016108e2906130b1565b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b60408051606081018252600080825260208201819052918101919091528160005481101561197e57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff1615159181018290529061197c5780516001600160a01b031615611913579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215611977579392505050565b611913565b505b604051636f96cda160e11b815260040160405180910390fd5b6000600880546119a690612dd6565b80601f01602080910402602001604051908101604052809291908181526020018280546119d290612dd6565b8015611a1f5780601f106119f457610100808354040283529160200191611a1f565b820191906000526020600020905b815481529060010190602001808311611a0257829003601f168201915b50508551939450611a3b93600893506020870192509050612742565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051611a6d9291906130da565b60405180910390a15050565b612710811115611a9b5760405162461bcd60e51b81526004016108e2906130b1565b6040805180820182526001600160a01b0384811680835260208084018681526000898152600b8352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a3505050565b6001600160a01b038216331415611b4a5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000546107c98383612321565b6060611be883836040518060600160405280602781526020016132026027913961233b565b9392505050565b611bfa848484612149565b611c0c836001600160a01b031661240c565b1561091c57611c1d8484848461241b565b61091c576040516368d2bf6b60e11b815260040160405180910390fd5b6000806000611c48600c5490565b90506000600c805480602002602001604051908101604052809291908181526020018280548015611c9857602002820191906000526020600020905b815481526020019060010190808311611c84575b5050505050905060005b82811015611d0457818181518110611cbc57611cbc612e39565b6020026020010151861015611cf257809350818181518110611ce057611ce0612e39565b60200260200101519450505050915091565b611cfd600182612f57565b9050611ca2565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b60448201526064016108e2565b60606000611d4c600c5490565b90506000600c805480602002602001604051908101604052809291908181526020018280548015611d9c57602002820191906000526020600020905b815481526020019060010190808311611d88575b5050505050905060005b82811015611d0457818181518110611dc057611dc0612e39565b6020026020010151851015611e8e57600d6000838381518110611de557611de5612e39565b602002602001015181526020019081526020016000208054611e0690612dd6565b80601f0160208091040260200160405190810160405280929190818152602001828054611e3290612dd6565b8015611e7f5780601f10611e5457610100808354040283529160200191611e7f565b820191906000526020600020905b815481529060010190602001808311611e6257829003601f168201915b50505050509350505050919050565b611e99600182612f57565b9050611da6565b606081611ec45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611eee5780611ed881612fb5565b9150611ee79050600a83612e9a565b9150611ec8565b6000816001600160401b03811115611f0857611f08612990565b6040519080825280601f01601f191660200182016040528015611f32576020820181803683370190505b5090505b8415611f9d57611f47600183613108565b9150611f54600a8661311f565b611f5f906030612f57565b60f81b818381518110611f7457611f74612e39565b60200101906001600160f81b031916908160001a905350611f96600a86612e9a565b9450611f36565b949350505050565b600082815260116020908152604090912082516108b992840190612742565b6000828152600d6020908152604090912082516108b992840190612742565b6000611fed611470565b6120095760405162461bcd60e51b81526004016108e290612e11565b8561203e5760405162461bcd60e51b81526020600482015260056024820152640c08185b5d60da1b60448201526064016108e2565b6000600e549050612086818888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061250392505050565b600e919091559150807f2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d60016120bc8a84612f57565b6120c69190613108565b888888886040516120db95949392919061315c565b60405180910390a25095945050505050565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006121548261187d565b9050836001600160a01b031681600001516001600160a01b03161461218b5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806121a957506121a98533610734565b806121c45750336121b984610861565b6001600160a01b0316145b9050806121e457604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661220b57604051633a954ecd60e21b815260040160405180910390fd5b612217600084876120ed565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166122ea5760005482146122ea57805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b031660008051602061322983398151915260405160405180910390a46110dd565b61036e828260405180602001604052806000815250612570565b60606123468461240c565b6123a15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016108e2565b600080856001600160a01b0316856040516123bc9190613195565b600060405180830381855af49150503d80600081146123f7576040519150601f19603f3d011682016040523d82523d6000602084013e6123fc565b606091505b5091509150611284828286612709565b6001600160a01b03163b151590565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906124509033908990889088906004016131b1565b6020604051808303816000875af192505050801561248b575060408051601f3d908101601f19168201909252612488918101906131e4565b60015b6124e6573d8080156124b9576040519150601f19603f3d011682016040523d82523d6000602084013e6124be565b606091505b5080516124de576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6000806125108486612f57565b600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018190556000818152600d602090815260409091208551929450849350612567929091860190612742565b50935093915050565b6000546001600160a01b03841661259957604051622e076360e81b815260040160405180910390fd5b826125b75760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546001600160801b031981166001600160401b038083168b018116918217600160401b6001600160401b031990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b42909316929092029190911790558190818501906126509061240c565b156126c6575b60405182906001600160a01b03881690600090600080516020613229833981519152908290a461268f600087848060010195508761241b565b6126ac576040516368d2bf6b60e11b815260040160405180910390fd5b8082106126565782600054146126c157600080fd5b6126f9565b5b6040516001830192906001600160a01b03881690600090600080516020613229833981519152908290a48082106126c7575b50600090815561091c9085838684565b60608315612718575081611be8565b8251156127285782518084602001fd5b8160405162461bcd60e51b81526004016108e29190612866565b82805461274e90612dd6565b90600052602060002090601f01602090048101928261277057600085556127b6565b82601f1061278957805160ff19168380011785556127b6565b828001600101855582156127b6579182015b828111156127b657825182559160200191906001019061279b565b506127c29291506127c6565b5090565b5b808211156127c257600081556001016127c7565b6001600160e01b0319811681146108f457600080fd5b60006020828403121561280357600080fd5b8135611be8816127db565b60005b83811015612829578181015183820152602001612811565b8381111561091c5750506000910152565b6000815180845261285281602086016020860161280e565b601f01601f19169290920160200192915050565b602081526000611be8602083018461283a565b60006020828403121561288b57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146128bd57600080fd5b919050565b600080604083850312156128d557600080fd5b6128de836128a6565b946020939093013593505050565b6000602082840312156128fe57600080fd5b611be8826128a6565b60008060006060848603121561291c57600080fd5b612925846128a6565b9250612933602085016128a6565b9150604084013590509250925092565b6000806040838503121561295657600080fd5b50508035926020909101359150565b80151581146108f457600080fd5b60006020828403121561298557600080fd5b8135611be881612965565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156129ce576129ce612990565b604052919050565b60006001600160401b038211156129ef576129ef612990565b50601f01601f191660200190565b6000612a10612a0b846129d6565b6129a6565b9050828152838383011115612a2457600080fd5b828260208301376000602084830101529392505050565b600060208284031215612a4d57600080fd5b81356001600160401b03811115612a6357600080fd5b8201601f81018413612a7457600080fd5b611f9d848235602084016129fd565b600080600060608486031215612a9857600080fd5b83359250612933602085016128a6565b60008083601f840112612aba57600080fd5b5081356001600160401b03811115612ad157600080fd5b602083019150836020828501011115612ae957600080fd5b9250929050565b600080600060408486031215612b0557600080fd5b8335925060208401356001600160401b03811115612b2257600080fd5b612b2e86828701612aa8565b9497909650939450505050565b60008060408385031215612b4e57600080fd5b612b57836128a6565b91506020830135612b6781612965565b809150509250929050565b60008060208385031215612b8557600080fd5b82356001600160401b0380821115612b9c57600080fd5b818501915085601f830112612bb057600080fd5b813581811115612bbf57600080fd5b8660208260051b8501011115612bd457600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612c3b57603f19888603018452612c2985835161283a565b94509285019290850190600101612c0d565b5092979650505050505050565b600082601f830112612c5957600080fd5b611be8838335602085016129fd565b60008060008060808587031215612c7e57600080fd5b612c87856128a6565b9350612c95602086016128a6565b92506040850135915060608501356001600160401b03811115612cb757600080fd5b612cc387828801612c48565b91505092959194509250565b600080600080600060608688031215612ce757600080fd5b8535945060208601356001600160401b0380821115612d0557600080fd5b612d1189838a01612aa8565b90965094506040880135915080821115612d2a57600080fd5b50612d3788828901612aa8565b969995985093965092949392505050565b600080600060408486031215612d5d57600080fd5b83356001600160401b0380821115612d7457600080fd5b612d8087838801612c48565b94506020860135915080821115612d9657600080fd5b50612b2e86828701612aa8565b60008060408385031215612db657600080fd5b612dbf836128a6565b9150612dcd602084016128a6565b90509250929050565b600181811c90821680612dea57607f821691505b60208210811415612e0b57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612e7f57612e7f612e4f565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612ea957612ea9612e84565b500490565b60008060408385031215612ec157600080fd5b82516001600160401b03811115612ed757600080fd5b8301601f81018513612ee857600080fd5b8051612ef6612a0b826129d6565b818152866020838501011115612f0b57600080fd5b612f1c82602083016020860161280e565b60209590950151949694955050505050565b60008551612f40818460208a0161280e565b820184868237909301918252506020019392505050565b60008219821115612f6a57612f6a612e4f565b500190565b6000808335601e19843603018112612f8657600080fd5b8301803591506001600160401b03821115612fa057600080fd5b602001915036819003821315612ae957600080fd5b6000600019821415612fc957612fc9612e4f565b5060010190565b60008251612fe281846020870161280e565b600360fc1b920191825250600101919050565b6000835161300781846020880161280e565b83519083019061301b81836020880161280e565b01949350505050565b6000806040838503121561303757600080fd5b82356001600160401b0381111561304d57600080fd5b61305985828601612c48565b95602094909401359450505050565b82848237909101908152602001919050565b6001600160a01b0392831681529116602082015260400190565b6000602082840312156130a657600080fd5b8151611be881612965565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b6040815260006130ed604083018561283a565b82810360208401526130ff818561283a565b95945050505050565b60008282101561311a5761311a612e4f565b500390565b60008261312e5761312e612e84565b500690565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b858152606060208201526000613176606083018688613133565b8281036040840152613189818587613133565b98975050505050505050565b600082516131a781846020870161280e565b9190910192915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906112849083018461283a565b6000602082840312156131f657600080fd5b8151611be8816127db56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122006b4a7810dba8555180afb75fa95627e315ab4187f5ccb83d045911c3bc5b76564736f6c634300080c0033",
    "sourceMap": "979:3797:12:-:0;;;1260:253;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1448:13;1463:5;1470:7;1479:17;1498:11;413:42:55;516:4;2263:5:14;2270:7;1899:5:25;1891;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1914:17:25;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;2127:7:25;1941:31;;-1:-1:-1;1313:52:68;1323:30;1355:9;1313;:52::i;:::-;-1:-1:-1;;202:1:220;307:7;:22;2289:26:14::1;2301:13:::0;2289:11:::1;:26::i;:::-;2325:56;2350:17:::0;-1:-1:-1;;;;;2325:56:14;::::1;:24;:56::i;:::-;2391:29;2415:4;2391:23;:29::i;:::-;2082:345:::0;;;;;1260:253:12;;;;;979:3797;;2349:783:68;905:42;2484:45;:49;2480:646;;-1:-1:-1;;;;;2607:51:68;;;:55;2603:513;;2730:9;2726:289;;;2763:92;;-1:-1:-1;;;2763:92:68;;2817:4;2763:92;;;2336:34:635;-1:-1:-1;;;;;2406:15:635;;2386:18;;;2379:43;905:42:68;;2763:45;;2271:18:635;;2763:92:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2349:783;;:::o;2726:289::-;2902:94;;-1:-1:-1;;;2902:94:68;;2958:4;2902:94;;;2336:34:635;-1:-1:-1;;;;;2406:15:635;;2386:18;;;2379:43;905:42:68;;2902:47;;2271:18:635;;2902:94:68;2124:304:635;2603:513:68;3053:48;;-1:-1:-1;;;3053:48:68;;3095:4;3053:48;;;2579:51:635;905:42:68;;3053:33;;2552:18:635;;3053:48:68;;;;;;;;;;;;;;;;;;;2603:513;2349:783;;:::o;1421:172:70:-;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;3430:334:77:-;3549:6;3535:11;:20;3531:76;;;3571:25;;-1:-1:-1;;;3571:25:77;;2843:2:635;3571:25:77;;;2825:21:635;2882:2;2862:18;;;2855:30;-1:-1:-1;;;2901:18:635;;;2894:45;2956:18;;3571:25:77;;;;;;;3531:76;3617:16;:36;;-1:-1:-1;;;;;3617:36:77;;-1:-1:-1;;;;;;3663:32:77;;;;;-1:-1:-1;;;3663:32:77;;;;;;;;3711:46;;3131:25:635;;;3711:46:77;;3119:2:635;3104:18;3711:46:77;;;;;;;3430:334;;:::o;457:160:67:-;528:19;:34;;-1:-1:-1;;528:34:67;;;;;;;;;;577:33;;3307:41:635;;;577:33:67;;3295:2:635;3280:18;577:33:67;;;;;;;457:160;:::o;979:3797:12:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;979:3797:12;;;-1:-1:-1;979:3797:12;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:177:635;93:13;;-1:-1:-1;;;;;135:31:635;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:127::-;257:10;252:3;248:20;245:1;238:31;288:4;285:1;278:15;312:4;309:1;302:15;328:885;382:5;435:3;428:4;420:6;416:17;412:27;402:55;;453:1;450;443:12;402:55;476:13;;-1:-1:-1;;;;;538:10:635;;;535:36;;;551:18;;:::i;:::-;626:2;620:9;594:2;680:13;;-1:-1:-1;;676:22:635;;;700:2;672:31;668:40;656:53;;;724:18;;;744:22;;;721:46;718:72;;;770:18;;:::i;:::-;810:10;806:2;799:22;845:2;837:6;830:18;867:4;857:14;;912:3;907:2;902;894:6;890:15;886:24;883:33;880:53;;;929:1;926;919:12;880:53;951:1;942:10;;961:133;975:2;972:1;969:9;961:133;;;1063:14;;;1059:23;;1053:30;1032:14;;;1028:23;;1021:63;986:10;;;;961:133;;;1112:2;1109:1;1106:9;1103:80;;;1171:1;1166:2;1161;1153:6;1149:15;1145:24;1138:35;1103:80;1201:6;328:885;-1:-1:-1;;;;;;328:885:635:o;1218:901::-;1344:6;1352;1360;1368;1376;1429:3;1417:9;1408:7;1404:23;1400:33;1397:53;;;1446:1;1443;1436:12;1397:53;1469:40;1499:9;1469:40;:::i;:::-;1553:2;1538:18;;1532:25;1459:50;;-1:-1:-1;;;;;;1606:14:635;;;1603:34;;;1633:1;1630;1623:12;1603:34;1656:61;1709:7;1700:6;1689:9;1685:22;1656:61;:::i;:::-;1646:71;;1763:2;1752:9;1748:18;1742:25;1726:41;;1792:2;1782:8;1779:16;1776:36;;;1808:1;1805;1798:12;1776:36;;1831:63;1886:7;1875:8;1864:9;1860:24;1831:63;:::i;:::-;1821:73;;;1913:49;1958:2;1947:9;1943:18;1913:49;:::i;:::-;2005:3;1990:19;;1984:26;1903:59;;-1:-1:-1;;;;;;2039:31:635;;2029:42;;2019:70;;2085:1;2082;2075:12;2019:70;2108:5;2098:15;;;1218:901;;;;;;;;:::o;3359:380::-;3438:1;3434:12;;;;3481;;;3502:61;;3556:4;3548:6;3544:17;3534:27;;3502:61;3609:2;3601:6;3598:14;3578:18;3575:38;3572:161;;;3655:10;3650:3;3646:20;3643:1;3636:31;3690:4;3687:1;3680:15;3718:4;3715:1;3708:15;3572:161;;3359:380;;;:::o;:::-;979:3797:12;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106101e65760003560e01c80636352211e116101095780636352211e146104c557806363b45e2d146104e557806370a08231146104fa5780638da5cb5b1461051a578063938e3d7b1461052f57806395d89b411461054f5780639bcf7a15146105645780639fc4d68f14610584578063a05112fc146105a4578063a22cb465146105c4578063aad3ec96146105e4578063ac9650d8146105f7578063acd083f814610624578063b24f2d3914610639578063b88d4fde14610664578063c87b56dd14610684578063ce805642146106a4578063d37c353b146106c4578063e7150322146106e4578063e8a3d48514610704578063e985e9c51461071957600080fd5b806301ffc9a7146101eb57806306fdde0314610220578063081812fc14610242578063095ea7b31461026f57806313af40351461029157806318160ddd146102b157806323b872dd146102d45780632419f51b146102f45780632a55205a146103145780632f92023a1461035357806332f0cd64146103725780633b1475a71461039257806341f43434146103a757806342842e0e146103c957806342966c68146103e9578063492e224b146104095780634cc157df14610429578063504c6e011461046b57806357fd845514610485578063600dd5ea146104a5575b600080fd5b3480156101f757600080fd5b5061020b6102063660046127f1565b610762565b60405190151581526020015b60405180910390f35b34801561022c57600080fd5b506102356107cf565b6040516102179190612866565b34801561024e57600080fd5b5061026261025d366004612879565b610861565b6040516102179190612892565b34801561027b57600080fd5b5061028f61028a3660046128c2565b6108a5565b005b34801561029d57600080fd5b5061028f6102ac3660046128ec565b6108be565b3480156102bd57600080fd5b50600154600054035b604051908152602001610217565b3480156102e057600080fd5b5061028f6102ef366004612907565b6108f7565b34801561030057600080fd5b506102c661030f366004612879565b610922565b34801561032057600080fd5b5061033461032f366004612943565b610990565b604080516001600160a01b039093168352602083019190915201610217565b34801561035f57600080fd5b5061028f61036e3660046128c2565b5050565b34801561037e57600080fd5b5061028f61038d366004612973565b6109cd565b34801561039e57600080fd5b50600e546102c6565b3480156103b357600080fd5b506102626daaeb6d7670e522a718067333cd4e81565b3480156103d557600080fd5b5061028f6103e4366004612907565b610a3e565b3480156103f557600080fd5b5061028f610404366004612879565b610a63565b34801561041557600080fd5b5061020b610424366004612879565b610a6e565b34801561043557600080fd5b50610449610444366004612879565b610a94565b604080516001600160a01b03909316835261ffff909116602083015201610217565b34801561047757600080fd5b50600f5461020b9060ff1681565b34801561049157600080fd5b5061028f6104a03660046128ec565b610aff565b3480156104b157600080fd5b5061028f6104c03660046128c2565b610b6f565b3480156104d157600080fd5b506102626104e0366004612879565b610b9d565b3480156104f157600080fd5b50600c546102c6565b34801561050657600080fd5b506102c66105153660046128ec565b610baf565b34801561052657600080fd5b50610262610bfd565b34801561053b57600080fd5b5061028f61054a366004612a3b565b610c0c565b34801561055b57600080fd5b50610235610c39565b34801561057057600080fd5b5061028f61057f366004612a83565b610c48565b34801561059057600080fd5b5061023561059f366004612af0565b610c77565b3480156105b057600080fd5b506102356105bf366004612879565b610df8565b3480156105d057600080fd5b5061028f6105df366004612b3b565b610e92565b61028f6105f23660046128c2565b610ea6565b34801561060357600080fd5b50610617610612366004612b72565b610fc3565b6040516102179190612be6565b34801561063057600080fd5b506000546102c6565b34801561064557600080fd5b50600a546001600160a01b03811690600160a01b900461ffff16610449565b34801561067057600080fd5b5061028f61067f366004612c68565b6110b7565b34801561069057600080fd5b5061023561069f366004612879565b6110e4565b3480156106b057600080fd5b506102356106bf366004612af0565b611153565b3480156106d057600080fd5b506102c66106df366004612ccf565b6111f6565b3480156106f057600080fd5b506102356106ff366004612d48565b61128e565b34801561071057600080fd5b50610235611303565b34801561072557600080fd5b5061020b610734366004612da3565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b60006301ffc9a760e01b6001600160e01b03198316148061079357506380ac58cd60e01b6001600160e01b03198316145b806107ae5750635b5e139f60e01b6001600160e01b03198316145b806107c957506001600160e01b0319821663152a902d60e11b145b92915050565b6060600280546107de90612dd6565b80601f016020809104026020016040519081016040528092919081815260200182805461080a90612dd6565b80156108575780601f1061082c57610100808354040283529160200191610857565b820191906000526020600020905b81548152906001019060200180831161083a57829003601f168201915b5050505050905090565b600061086c82611310565b610889576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b816108af8161133b565b6108b983836113ee565b505050565b6108c6611470565b6108eb5760405162461bcd60e51b81526004016108e290612e11565b60405180910390fd5b6108f481611493565b50565b826001600160a01b0381163314610911576109113361133b565b61091c8484846114e5565b50505050565b600061092d600c5490565b821061096b5760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064016108e2565b600c828154811061097e5761097e612e39565b90600052602060002001549050919050565b60008060008061099f86610a94565b90945084925061ffff1690506127106109b88287612e65565b6109c29190612e9a565b925050509250929050565b6109d5611470565b610a355760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420617574686f72697a656420746f20736574206f70657261746f72207260448201526a32b9ba3934b1ba34b7b71760a91b60648201526084016108e2565b6108f4816114f0565b826001600160a01b0381163314610a5857610a583361133b565b61091c848484611537565b6108f4816001611552565b60008181526011602052604081208054829190610a8a90612dd6565b9050119050919050565b6000818152600b60209081526040808320815180830190925280546001600160a01b031680835260019091015492820192909252829115610adb5780516020820151610af5565b600a546001600160a01b03811690600160a01b900461ffff165b9250925050915091565b610b07611470565b610b645760405162461bcd60e51b815260206004820152602860248201527f4e6f7420617574686f72697a656420746f2073756273637269626520746f207260448201526732b3b4b9ba393c9760c11b60648201526084016108e2565b6108f4816001611701565b610b77611470565b610b935760405162461bcd60e51b81526004016108e290612e11565b61036e82826117f9565b6000610ba88261187d565b5192915050565b60006001600160a01b038216610bd8576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6009546001600160a01b031690565b610c14611470565b610c305760405162461bcd60e51b81526004016108e290612e11565b6108f481611997565b6060600380546107de90612dd6565b610c50611470565b610c6c5760405162461bcd60e51b81526004016108e290612e11565b6108b9838383611a79565b600083815260116020526040812080546060929190610c9590612dd6565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc190612dd6565b8015610d0e5780601f10610ce357610100808354040283529160200191610d0e565b820191906000526020600020905b815481529060010190602001808311610cf157829003601f168201915b50505050509050805160001415610d5b5760405162461bcd60e51b8152602060048201526011602482015270139bdd1a1a5b99c81d1bc81c995d99585b607a1b60448201526064016108e2565b60008082806020019051810190610d729190612eae565b91509150610d8182878761128e565b93508084878746604051602001610d9b9493929190612f2e565b6040516020818303038152906040528051906020012014610dee5760405162461bcd60e51b815260206004820152600d60248201526c496e636f7272656374206b657960981b60448201526064016108e2565b5050509392505050565b60116020526000908152604090208054610e1190612dd6565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3d90612dd6565b8015610e8a5780601f10610e5f57610100808354040283529160200191610e8a565b820191906000526020600020905b815481529060010190602001808311610e6d57829003601f168201915b505050505081565b81610e9c8161133b565b6108b98383611b20565b60026010541415610ef95760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108e2565b6002601055600e54600054610f0f908390612f57565b1115610f5d5760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420656e6f756768206c617a79206d696e74656420746f6b656e732e000060448201526064016108e2565b6000610f698383611bb6565b905080836001600160a01b0316336001600160a01b03167fff097c7d8b1957a4ff09ef1361b5fb54dcede3941ba836d0beb9d10bec725de685604051610fb191815260200190565b60405180910390a45050600160105550565b6060816001600160401b03811115610fdd57610fdd612990565b60405190808252806020026020018201604052801561101057816020015b6060815260200190600190039081610ffb5790505b50905060005b828110156110b0576110803085858481811061103457611034612e39565b90506020028101906110469190612f6f565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611bc392505050565b82828151811061109257611092612e39565b602002602001018190525080806110a890612fb5565b915050611016565b5092915050565b836001600160a01b03811633146110d1576110d13361133b565b6110dd85858585611bef565b5050505050565b606060006110f183611c3a565b50905060006110ff84611d3f565b905061110a82610a6e565b1561113857806040516020016111209190612fd0565b60405160208183030381529060405292505050919050565b8061114285611ea0565b604051602001611120929190612ff5565b606061115d611470565b6111795760405162461bcd60e51b81526004016108e290612e11565b600061118485610922565b9050611191818585610c77565b91506111ac8160405180602001604052806000815250611fa5565b6111b68183611fc4565b847f6df1d8db2a036436ffe0b2d1833f2c5f1e624818dfce2578c0faa4b83ef9998d836040516111e69190612866565b60405180910390a2509392505050565b600081156112775760008061120d84860186613024565b91509150815160001415801561122257508015155b156112745761127488600e546112389190612f57565b86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611fa592505050565b50505b6112848686868686611fe3565b9695505050505050565b8251604080518083016020019091528181529060005b818110156112fa5760008585836040516020016112c393929190613068565b60408051601f198184030181529190528051602091820120888401820151188584018201526112f3915082612f57565b90506112a4565b50509392505050565b60088054610e1190612dd6565b60008054821080156107c9575050600090815260046020526040902054600160e01b900460ff161590565b600f5460ff16156108f4576daaeb6d7670e522a718067333cd4e3b156108f457604051633185c44d60e21b81526daaeb6d7670e522a718067333cd4e9063c61711349061138e903090859060040161307a565b602060405180830381865afa1580156113ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cf9190613094565b6108f45780604051633b79c77360e21b81526004016108e29190612892565b60006113f982610b9d565b9050806001600160a01b0316836001600160a01b0316141561142e5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614611465576114488133610734565b611465576040516367d9dca160e11b815260040160405180910390fd5b6108b98383836120ed565b600061147a610bfd565b6001600160a01b0316336001600160a01b031614905090565b600980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a35050565b6108b9838383612149565b600f805460ff19168215159081179091556040519081527f38475885990d8dfe9ca01f0ef160a1b5514426eab9ddbc953a3353410ba780969060200160405180910390a150565b6108b9838383604051806020016040528060008152506110b7565b600061155d8361187d565b805190915082156115c3576000336001600160a01b038316148061158657506115868233610734565b806115a157503361159686610861565b6001600160a01b0316145b9050806115c157604051632ce44b5f60e11b815260040160405180910390fd5b505b6115cf600085836120ed565b6001600160a01b0380821660008181526005602090815260408083208054600160801b6000196001600160401b038084169190910181166001600160401b03198416811783900482166001908101831690930267ffffffffffffffff67ffffffffffffffff60801b0119909416179290921783558b86526004909452828520805460ff60e01b1942909316600160a01b026001600160e01b03199091169097179690961716600160e01b1785559189018084529220805491949091166116c95760005482146116c957805460208701516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038716171781555b5050604051869250600091506001600160a01b03841690600080516020613229833981519152908390a4505060018054810190555050565b6daaeb6d7670e522a718067333cd4e3b1561036e576001600160a01b0382163b156117c857801561179557604051633e9f1edf60e11b81526daaeb6d7670e522a718067333cd4e90637d3e3dbe9061175f903090869060040161307a565b600060405180830381600087803b15801561177957600080fd5b505af115801561178d573d6000803e3d6000fd5b505050505050565b60405163a0af290360e01b81526daaeb6d7670e522a718067333cd4e9063a0af29039061175f903090869060040161307a565b604051632210724360e11b81526daaeb6d7670e522a718067333cd4e90634420e4869061175f903090600401612892565b61271081111561181b5760405162461bcd60e51b81526004016108e2906130b1565b600a80546001600160a01b0384166001600160b01b03199091168117600160a01b61ffff851602179091556040518281527f90d7ec04bcb8978719414f82e52e4cb651db41d0e6f8cea6118c2191e6183adb9060200160405180910390a25050565b60408051606081018252600080825260208201819052918101919091528160005481101561197e57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff1615159181018290529061197c5780516001600160a01b031615611913579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215611977579392505050565b611913565b505b604051636f96cda160e11b815260040160405180910390fd5b6000600880546119a690612dd6565b80601f01602080910402602001604051908101604052809291908181526020018280546119d290612dd6565b8015611a1f5780601f106119f457610100808354040283529160200191611a1f565b820191906000526020600020905b815481529060010190602001808311611a0257829003601f168201915b50508551939450611a3b93600893506020870192509050612742565b507fc9c7c3fe08b88b4df9d4d47ef47d2c43d55c025a0ba88ca442580ed9e7348a168183604051611a6d9291906130da565b60405180910390a15050565b612710811115611a9b5760405162461bcd60e51b81526004016108e2906130b1565b6040805180820182526001600160a01b0384811680835260208084018681526000898152600b8352869020945185546001600160a01b031916941693909317845591516001909301929092559151838152909185917f7365cf4122f072a3365c20d54eff9b38d73c096c28e1892ec8f5b0e403a0f12d910160405180910390a3505050565b6001600160a01b038216331415611b4a5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000546107c98383612321565b6060611be883836040518060600160405280602781526020016132026027913961233b565b9392505050565b611bfa848484612149565b611c0c836001600160a01b031661240c565b1561091c57611c1d8484848461241b565b61091c576040516368d2bf6b60e11b815260040160405180910390fd5b6000806000611c48600c5490565b90506000600c805480602002602001604051908101604052809291908181526020018280548015611c9857602002820191906000526020600020905b815481526020019060010190808311611c84575b5050505050905060005b82811015611d0457818181518110611cbc57611cbc612e39565b6020026020010151861015611cf257809350818181518110611ce057611ce0612e39565b60200260200101519450505050915091565b611cfd600182612f57565b9050611ca2565b5060405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b60448201526064016108e2565b60606000611d4c600c5490565b90506000600c805480602002602001604051908101604052809291908181526020018280548015611d9c57602002820191906000526020600020905b815481526020019060010190808311611d88575b5050505050905060005b82811015611d0457818181518110611dc057611dc0612e39565b6020026020010151851015611e8e57600d6000838381518110611de557611de5612e39565b602002602001015181526020019081526020016000208054611e0690612dd6565b80601f0160208091040260200160405190810160405280929190818152602001828054611e3290612dd6565b8015611e7f5780601f10611e5457610100808354040283529160200191611e7f565b820191906000526020600020905b815481529060010190602001808311611e6257829003601f168201915b50505050509350505050919050565b611e99600182612f57565b9050611da6565b606081611ec45750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611eee5780611ed881612fb5565b9150611ee79050600a83612e9a565b9150611ec8565b6000816001600160401b03811115611f0857611f08612990565b6040519080825280601f01601f191660200182016040528015611f32576020820181803683370190505b5090505b8415611f9d57611f47600183613108565b9150611f54600a8661311f565b611f5f906030612f57565b60f81b818381518110611f7457611f74612e39565b60200101906001600160f81b031916908160001a905350611f96600a86612e9a565b9450611f36565b949350505050565b600082815260116020908152604090912082516108b992840190612742565b6000828152600d6020908152604090912082516108b992840190612742565b6000611fed611470565b6120095760405162461bcd60e51b81526004016108e290612e11565b8561203e5760405162461bcd60e51b81526020600482015260056024820152640c08185b5d60da1b60448201526064016108e2565b6000600e549050612086818888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061250392505050565b600e919091559150807f2a0365091ef1a40953c670dce28177e37520648a6fdc91506bffac0ab045570d60016120bc8a84612f57565b6120c69190613108565b888888886040516120db95949392919061315c565b60405180910390a25095945050505050565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006121548261187d565b9050836001600160a01b031681600001516001600160a01b03161461218b5760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b03861614806121a957506121a98533610734565b806121c45750336121b984610861565b6001600160a01b0316145b9050806121e457604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03841661220b57604051633a954ecd60e21b815260040160405180910390fd5b612217600084876120ed565b6001600160a01b03858116600090815260056020908152604080832080546001600160401b03198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217835587018084529220805491939091166122ea5760005482146122ea57805460208601516001600160401b0316600160a01b026001600160e01b03199091166001600160a01b038a16171781555b50505082846001600160a01b0316866001600160a01b031660008051602061322983398151915260405160405180910390a46110dd565b61036e828260405180602001604052806000815250612570565b60606123468461240c565b6123a15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016108e2565b600080856001600160a01b0316856040516123bc9190613195565b600060405180830381855af49150503d80600081146123f7576040519150601f19603f3d011682016040523d82523d6000602084013e6123fc565b606091505b5091509150611284828286612709565b6001600160a01b03163b151590565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906124509033908990889088906004016131b1565b6020604051808303816000875af192505050801561248b575060408051601f3d908101601f19168201909252612488918101906131e4565b60015b6124e6573d8080156124b9576040519150601f19603f3d011682016040523d82523d6000602084013e6124be565b606091505b5080516124de576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6000806125108486612f57565b600c8054600181019091557fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7018190556000818152600d602090815260409091208551929450849350612567929091860190612742565b50935093915050565b6000546001600160a01b03841661259957604051622e076360e81b815260040160405180910390fd5b826125b75760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038416600081815260056020908152604080832080546001600160801b031981166001600160401b038083168b018116918217600160401b6001600160401b031990941690921783900481168b01811690920217909155858452600490925290912080546001600160e01b0319168317600160a01b42909316929092029190911790558190818501906126509061240c565b156126c6575b60405182906001600160a01b03881690600090600080516020613229833981519152908290a461268f600087848060010195508761241b565b6126ac576040516368d2bf6b60e11b815260040160405180910390fd5b8082106126565782600054146126c157600080fd5b6126f9565b5b6040516001830192906001600160a01b03881690600090600080516020613229833981519152908290a48082106126c7575b50600090815561091c9085838684565b60608315612718575081611be8565b8251156127285782518084602001fd5b8160405162461bcd60e51b81526004016108e29190612866565b82805461274e90612dd6565b90600052602060002090601f01602090048101928261277057600085556127b6565b82601f1061278957805160ff19168380011785556127b6565b828001600101855582156127b6579182015b828111156127b657825182559160200191906001019061279b565b506127c29291506127c6565b5090565b5b808211156127c257600081556001016127c7565b6001600160e01b0319811681146108f457600080fd5b60006020828403121561280357600080fd5b8135611be8816127db565b60005b83811015612829578181015183820152602001612811565b8381111561091c5750506000910152565b6000815180845261285281602086016020860161280e565b601f01601f19169290920160200192915050565b602081526000611be8602083018461283a565b60006020828403121561288b57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146128bd57600080fd5b919050565b600080604083850312156128d557600080fd5b6128de836128a6565b946020939093013593505050565b6000602082840312156128fe57600080fd5b611be8826128a6565b60008060006060848603121561291c57600080fd5b612925846128a6565b9250612933602085016128a6565b9150604084013590509250925092565b6000806040838503121561295657600080fd5b50508035926020909101359150565b80151581146108f457600080fd5b60006020828403121561298557600080fd5b8135611be881612965565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156129ce576129ce612990565b604052919050565b60006001600160401b038211156129ef576129ef612990565b50601f01601f191660200190565b6000612a10612a0b846129d6565b6129a6565b9050828152838383011115612a2457600080fd5b828260208301376000602084830101529392505050565b600060208284031215612a4d57600080fd5b81356001600160401b03811115612a6357600080fd5b8201601f81018413612a7457600080fd5b611f9d848235602084016129fd565b600080600060608486031215612a9857600080fd5b83359250612933602085016128a6565b60008083601f840112612aba57600080fd5b5081356001600160401b03811115612ad157600080fd5b602083019150836020828501011115612ae957600080fd5b9250929050565b600080600060408486031215612b0557600080fd5b8335925060208401356001600160401b03811115612b2257600080fd5b612b2e86828701612aa8565b9497909650939450505050565b60008060408385031215612b4e57600080fd5b612b57836128a6565b91506020830135612b6781612965565b809150509250929050565b60008060208385031215612b8557600080fd5b82356001600160401b0380821115612b9c57600080fd5b818501915085601f830112612bb057600080fd5b813581811115612bbf57600080fd5b8660208260051b8501011115612bd457600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612c3b57603f19888603018452612c2985835161283a565b94509285019290850190600101612c0d565b5092979650505050505050565b600082601f830112612c5957600080fd5b611be8838335602085016129fd565b60008060008060808587031215612c7e57600080fd5b612c87856128a6565b9350612c95602086016128a6565b92506040850135915060608501356001600160401b03811115612cb757600080fd5b612cc387828801612c48565b91505092959194509250565b600080600080600060608688031215612ce757600080fd5b8535945060208601356001600160401b0380821115612d0557600080fd5b612d1189838a01612aa8565b90965094506040880135915080821115612d2a57600080fd5b50612d3788828901612aa8565b969995985093965092949392505050565b600080600060408486031215612d5d57600080fd5b83356001600160401b0380821115612d7457600080fd5b612d8087838801612c48565b94506020860135915080821115612d9657600080fd5b50612b2e86828701612aa8565b60008060408385031215612db657600080fd5b612dbf836128a6565b9150612dcd602084016128a6565b90509250929050565b600181811c90821680612dea57607f821691505b60208210811415612e0b57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612e7f57612e7f612e4f565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612ea957612ea9612e84565b500490565b60008060408385031215612ec157600080fd5b82516001600160401b03811115612ed757600080fd5b8301601f81018513612ee857600080fd5b8051612ef6612a0b826129d6565b818152866020838501011115612f0b57600080fd5b612f1c82602083016020860161280e565b60209590950151949694955050505050565b60008551612f40818460208a0161280e565b820184868237909301918252506020019392505050565b60008219821115612f6a57612f6a612e4f565b500190565b6000808335601e19843603018112612f8657600080fd5b8301803591506001600160401b03821115612fa057600080fd5b602001915036819003821315612ae957600080fd5b6000600019821415612fc957612fc9612e4f565b5060010190565b60008251612fe281846020870161280e565b600360fc1b920191825250600101919050565b6000835161300781846020880161280e565b83519083019061301b81836020880161280e565b01949350505050565b6000806040838503121561303757600080fd5b82356001600160401b0381111561304d57600080fd5b61305985828601612c48565b95602094909401359450505050565b82848237909101908152602001919050565b6001600160a01b0392831681529116602082015260400190565b6000602082840312156130a657600080fd5b8151611be881612965565b6020808252600f908201526e45786365656473206d61782062707360881b604082015260600190565b6040815260006130ed604083018561283a565b82810360208401526130ff818561283a565b95945050505050565b60008282101561311a5761311a612e4f565b500390565b60008261312e5761312e612e84565b500690565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b858152606060208201526000613176606083018688613133565b8281036040840152613189818587613133565b98975050505050505050565b600082516131a781846020870161280e565b9190910192915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906112849083018461283a565b6000602082840312156131f657600080fd5b8151611be8816127db56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122006b4a7810dba8555180afb75fa95627e315ab4187f5ccb83d045911c3bc5b76564736f6c634300080c0033",
    "sourceMap": "979:3797:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2677:444:14;;;;;;;;;;-1:-1:-1;2677:444:14;;;;;:::i;:::-;;:::i;:::-;;;565:14:635;;558:22;540:41;;528:2;513:18;2677:444:14;;;;;;;;6137:98:25;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;7623:200::-;;;;;;;;;;-1:-1:-1;7623:200:25;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;7109:208:14:-;;;;;;;;;;-1:-1:-1;7109:208:14;;;;;:::i;:::-;;:::i;:::-;;1133:173:70;;;;;;;;;;-1:-1:-1;1133:173:70;;;;;:::i;:::-;;:::i;2290:306:25:-;;;;;;;;;;-1:-1:-1;2549:12:25;;2343:7;2533:13;:28;2290:306;;;2510:25:635;;;2498:2;2483:18;2290:306:25;2364:177:635;7364:208:14;;;;;;;;;;-1:-1:-1;7364:208:14;;;;;:::i;:::-;;:::i;1277:203:52:-;;;;;;;;;;-1:-1:-1;1277:203:52;;;;;:::i;:::-;;:::i;1421:347:77:-;;;;;;;;;;-1:-1:-1;1421:347:77;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;3324:32:635;;;3306:51;;3388:2;3373:18;;3366:34;;;;3279:18;1421:347:77;3132:274:635;5791:80:14;;;;;;;;;;-1:-1:-1;5791:80:14;;;;;:::i;:::-;;;;243:208:67;;;;;;;;;;-1:-1:-1;243:208:67;;;;;:::i;:::-;;:::i;6314:112:14:-;;;;;;;;;;-1:-1:-1;6398:21:14;;6314:112;;806:142:68;;;;;;;;;;;;905:42;806:142;;7623:216:14;;;;;;;;;;-1:-1:-1;7623:216:14;;;;;:::i;:::-;;:::i;6145:87::-;;;;;;;;;;-1:-1:-1;6145:87:14;;;;;:::i;:::-;;:::i;3937:129:57:-;;;;;;;;;;-1:-1:-1;3937:129:57;;;;;:::i;:::-;;:::i;2008:381:77:-;;;;;;;;;;-1:-1:-1;2008:381:77;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;4211:32:635;;;4193:51;;4292:6;4280:19;;;4275:2;4260:18;;4253:47;4166:18;2008:381:77;4021:285:635;205:31:67;;;;;;;;;;-1:-1:-1;205:31:67;;;;;;;;530:199:55;;;;;;;;;;-1:-1:-1;530:199:55;;;;;:::i;:::-;;:::i;3087:256:77:-;;;;;;;;;;-1:-1:-1;3087:256:77;;;;;:::i;:::-;;:::i;5952:123:25:-;;;;;;;;;;-1:-1:-1;5952:123:25;;;;;:::i;:::-;;:::i;980:96:52:-;;;;;;;;;;-1:-1:-1;1054:8:52;:15;980:96;;3378:203:25;;;;;;;;;;-1:-1:-1;3378:203:25;;;;;:::i;:::-;;:::i;871:86:70:-;;;;;;;;;;;;;:::i;1003:188:54:-;;;;;;;;;;-1:-1:-1;1003:188:54;;;;;:::i;:::-;;:::i;6299:102:25:-;;;;;;;;;;;;;:::i;4281:288:77:-;;;;;;;;;;-1:-1:-1;4281:288:77;;;;;:::i;:::-;;:::i;1383:534:57:-;;;;;;;;;;-1:-1:-1;1383:534:57;;;;;:::i;:::-;;:::i;568:46::-;;;;;;;;;;-1:-1:-1;568:46:57;;;;;:::i;:::-;;:::i;6841:227:14:-;;;;;;;;;;-1:-1:-1;6841:227:14;;;;;:::i;:::-;;:::i;4848:533::-;;;;;;:::i;:::-;;:::i;698:319:65:-;;;;;;;;;;-1:-1:-1;698:319:65;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;6504:105:14:-;;;;;;;;;;-1:-1:-1;6563:7:14;6589:13;6504:105;;2499:144:77;;;;;;;;;;-1:-1:-1;2599:16:77;;-1:-1:-1;;;;;2599:16:77;;;-1:-1:-1;;;2624:10:77;;;;2499:144;;7890:249:14;;;;;;;;;;-1:-1:-1;7890:249:14;;;;;:::i;:::-;;:::i;1927:410:12:-;;;;;;;;;;-1:-1:-1;1927:410:12;;;;;:::i;:::-;;:::i;4170:413::-;;;;;;;;;;-1:-1:-1;4170:413:12;;;;;:::i;:::-;;:::i;3144:548::-;;;;;;;;;;-1:-1:-1;3144:548:12;;;;;:::i;:::-;;:::i;2409:1283:57:-;;;;;;;;;;-1:-1:-1;2409:1283:57;;;;;:::i;:::-;;:::i;565:34:54:-;;;;;;;;;;;;;:::i;8238:162:25:-;;;;;;;;;;-1:-1:-1;8238:162:25;;;;;:::i;:::-;-1:-1:-1;;;;;8358:25:25;;;8335:4;8358:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;8238:162;2677:444:14;2780:4;-1:-1:-1;;;;;;;;;2815:25:14;;;;:100;;-1:-1:-1;;;;;;;;;;2890:25:14;;;2815:100;:175;;;-1:-1:-1;;;;;;;;;;2965:25:14;;;2815:175;:274;;;-1:-1:-1;;;;;;;3048:41:14;;-1:-1:-1;;;3048:41:14;2815:274;2796:293;2677:444;-1:-1:-1;;2677:444:14:o;6137:98:25:-;6191:13;6223:5;6216:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6137:98;:::o;7623:200::-;7691:7;7715:16;7723:7;7715;:16::i;:::-;7710:64;;7740:34;;-1:-1:-1;;;7740:34:25;;;;;;;;;;;7710:64;-1:-1:-1;7792:24:25;;;;:15;:24;;;;;;-1:-1:-1;;;;;7792:24:25;;7623:200::o;7109:208:14:-;7254:8;1812:30:68;1833:8;1812:20;:30::i;:::-;7278:32:14::1;7292:8;7302:7;7278:13;:32::i;:::-;7109:208:::0;;;:::o;1133:173:70:-;1203:14;:12;:14::i;:::-;1198:70;;1233:24;;-1:-1:-1;;;1233:24:70;;;;;;;:::i;:::-;;;;;;;;1198:70;1277:22;1289:9;1277:11;:22::i;:::-;1133:173;:::o;7364:208:14:-;7512:4;-1:-1:-1;;;;;1639:18:68;;1647:10;1639:18;1635:81;;1673:32;1694:10;1673:20;:32::i;:::-;7528:37:14::1;7547:4;7553:2;7557:7;7528:18;:37::i;:::-;7364:208:::0;;;;:::o;1277:203:52:-;1341:7;1374:17;1054:8;:15;;980:96;1374:17;1364:6;:27;1360:81;;1407:23;;-1:-1:-1;;;1407:23:52;;12242:2:635;1407:23:52;;;12224:21:635;12281:2;12261:18;;;12254:30;-1:-1:-1;;;12300:18:635;;;12293:43;12353:18;;1407:23:52;12040:337:635;1360:81:52;1457:8;1466:6;1457:16;;;;;;;;:::i;:::-;;;;;;;;;1450:23;;1277:203;;;:::o;1421:347:77:-;1558:16;1576:21;1614:17;1633:11;1648:31;1671:7;1648:22;:31::i;:::-;1613:66;;-1:-1:-1;1613:66:77;;-1:-1:-1;1613:66:77;;;-1:-1:-1;1755:6:77;1736:15;1613:66;1736:9;:15;:::i;:::-;1735:26;;;;:::i;:::-;1719:42;;1603:165;;1421:347;;;;;:::o;243:208:67:-;321:28;:26;:28::i;:::-;313:84;;;;-1:-1:-1;;;313:84:67;;13278:2:635;313:84:67;;;13260:21:635;13317:2;13297:18;;;13290:30;13356:34;13336:18;;;13329:62;-1:-1:-1;;;13407:18:635;;;13400:41;13458:19;;313:84:67;13076:407:635;313:84:67;407:37;431:12;407:23;:37::i;7623:216:14:-;7775:4;-1:-1:-1;;;;;1639:18:68;;1647:10;1639:18;1635:81;;1673:32;1694:10;1673:20;:32::i;:::-;7791:41:14::1;7814:4;7820:2;7824:7;7791:22;:41::i;6145:87::-:0;6204:21;6210:8;6220:4;6204:5;:21::i;3937:129:57:-;4002:4;4025:23;;;:13;:23;;;;;:30;;4002:4;;4025:23;:30;;;:::i;:::-;;;:34;4018:41;;3937:129;;;:::o;2008:381:77:-;2088:7;2152:29;;;:19;:29;;;;;;;;2115:66;;;;;;;;;;-1:-1:-1;;;;;2115:66:77;;;;;;;;;;;;;;;;2088:7;;2211:39;:171;;2327:25;;2361:19;;;;2211:171;;;2270:16;;-1:-1:-1;;;;;2270:16:77;;;-1:-1:-1;;;2295:10:77;;;;2211:171;2192:190;;;;;2008:381;;;:::o;530:199:55:-;609:28;:26;:28::i;:::-;601:81;;;;-1:-1:-1;;;601:81:55;;13690:2:635;601:81:55;;;13672:21:635;13729:2;13709:18;;;13702:30;13768:34;13748:18;;;13741:62;-1:-1:-1;;;13819:18:635;;;13812:38;13867:19;;601:81:55;13488:404:635;601:81:55;692:30;702:13;717:4;692:9;:30::i;3087:256:77:-;3199:20;:18;:20::i;:::-;3194:76;;3235:24;;-1:-1:-1;;;3235:24:77;;;;;;;:::i;3194:76::-;3280:56;3305:17;3324:11;3280:24;:56::i;5952:123:25:-;6016:7;6042:21;6055:7;6042:12;:21::i;:::-;:26;;5952:123;-1:-1:-1;;5952:123:25:o;3378:203::-;3442:7;-1:-1:-1;;;;;3465:19:25;;3461:60;;3493:28;;-1:-1:-1;;;3493:28:25;;;;;;;;;;;3461:60;-1:-1:-1;;;;;;3546:19:25;;;;;:12;:19;;;;;:27;-1:-1:-1;;;;;3546:27:25;;3378:203::o;871:86:70:-;944:6;;-1:-1:-1;;;;;944:6:70;;871:86::o;1003:188:54:-;1080:20;:18;:20::i;:::-;1075:76;;1116:24;;-1:-1:-1;;;1116:24:54;;;;;;;:::i;1075:76::-;1161:23;1179:4;1161:17;:23::i;6299:102:25:-;6355:13;6387:7;6380:14;;;;;:::i;4281:288:77:-;4428:20;:18;:20::i;:::-;4423:76;;4464:24;;-1:-1:-1;;;4464:24:77;;;;;;;:::i;4423:76::-;4509:53;4535:8;4545:10;4557:4;4509:25;:53::i;1383:534:57:-;1502:17;1522:23;;;:13;:23;;;;;1502:43;;1465:25;;1502:17;1522:23;1502:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1559:4;:11;1574:1;1559:16;1555:74;;;1591:27;;-1:-1:-1;;;1591:27:57;;14099:2:635;1591:27:57;;;14081:21:635;14138:2;14118:18;;;14111:30;-1:-1:-1;;;14157:18:635;;;14150:47;14214:18;;1591:27:57;13897:341:635;1555:74:57;1640:25;1667:22;1704:4;1693:34;;;;;;;;;;;;:::i;:::-;1639:88;;;;1759:34;1774:12;1788:4;;1759:14;:34::i;:::-;1738:56;;1878:14;1840:11;1853:4;;1859:13;1823:50;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1813:61;;;;;;:79;1805:105;;;;-1:-1:-1;;;1805:105:57;;15684:2:635;1805:105:57;;;15666:21:635;15723:2;15703:18;;;15696:30;-1:-1:-1;;;15742:18:635;;;15735:43;15795:18;;1805:105:57;15482:337:635;1805:105:57;1492:425;;;1383:534;;;;;:::o;568:46::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6841:227:14:-;6994:8;1812:30:68;1833:8;1812:20;:30::i;:::-;7018:43:14::1;7042:8;7052;7018:23;:43::i;4848:533::-:0;245:1:220;548:7;;:19;;540:63;;;;-1:-1:-1;;;540:63:220;;16026:2:635;540:63:220;;;16008:21:635;16065:2;16045:18;;;16038:30;16104:33;16084:18;;;16077:61;16155:18;;540:63:220;15824:355:635;540:63:220;245:1;678:7;:18;4984:21:14::1;::::0;4955:13:::1;::::0;:25:::1;::::0;4971:9;;4955:25:::1;:::i;:::-;:50;;4947:93;;;::::0;-1:-1:-1;;;4947:93:14;;16519:2:635;4947:93:14::1;::::0;::::1;16501:21:635::0;16558:2;16538:18;;;16531:30;16597:32;16577:18;;;16570:60;16647:18;;4947:93:14::1;16317:354:635::0;4947:93:14::1;5161:20;5184:44;5207:9;5218;5184:22;:44::i;:::-;5161:67;;5350:12;5339:9;-1:-1:-1::0;;;;;5313:61:14::1;5327:10;-1:-1:-1::0;;;;;5313:61:14::1;;5364:9;5313:61;;;;2510:25:635::0;;2498:2;2483:18;;2364:177;5313:61:14::1;;;;;;;;-1:-1:-1::0;;202:1:220;851:7;:22;-1:-1:-1;4848:533:14:o;698:319:65:-;775:22;831:4;-1:-1:-1;;;;;819:24:65;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;809:34;;858:9;853:134;873:15;;;853:134;;;922:54;961:4;968;;973:1;968:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;922:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;922:30:65;;-1:-1:-1;;;922:54:65:i;:::-;909:7;917:1;909:10;;;;;;;;:::i;:::-;;;;;;:67;;;;890:3;;;;;:::i;:::-;;;;853:134;;;;698:319;;;;:::o;7890:249:14:-;8069:4;-1:-1:-1;;;;;1639:18:68;;1647:10;1639:18;1635:81;;1673:32;1694:10;1673:20;:32::i;:::-;8085:47:14::1;8108:4;8114:2;8118:7;8127:4;8085:22;:47::i;:::-;7890:249:::0;;;;;:::o;1927:410:12:-;2001:13;2027:15;2048:21;2060:8;2048:11;:21::i;:::-;2026:43;;;2079:22;2104:21;2116:8;2104:11;:21::i;:::-;2079:46;;2140:25;2157:7;2140:16;:25::i;:::-;2136:195;;;2212:8;2195:31;;;;;;;;:::i;:::-;;;;;;;;;;;;;2181:46;;;;1927:410;;;:::o;2136:195::-;2289:8;2299:19;:8;:17;:19::i;:::-;2272:47;;;;;;;;;:::i;4170:413::-;4258:25;4303:12;:10;:12::i;:::-;4295:39;;;;-1:-1:-1;;;4295:39:12;;;;;;;:::i;:::-;4345:15;4363:25;4381:6;4363:17;:25::i;:::-;4345:43;;4412:27;4425:7;4434:4;;4412:12;:27::i;:::-;4398:41;;4450:30;4468:7;4450:30;;;;;;;;;;;;:17;:30::i;:::-;4490:33;4502:7;4511:11;4490;:33::i;:::-;4556:6;4539:37;4564:11;4539:37;;;;;;:::i;:::-;;;;;;;;4285:298;4170:413;;;;;:::o;3144:548::-;3299:15;3330:16;;3326:293;;3363:25;;3416:35;;;;3427:5;3416:35;:::i;:::-;3362:89;;;;3469:12;:19;3492:1;3469:24;;:48;;;;-1:-1:-1;3497:20:12;;;3469:48;3465:144;;;3537:57;3579:7;3555:21;;:31;;;;:::i;:::-;3588:5;;3537:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3537:17:12;;-1:-1:-1;;;3537:57:12:i;:::-;3348:271;;3326:293;3636:49;3651:7;3660:17;;3679:5;;3636:14;:49::i;:::-;3629:56;3144:548;-1:-1:-1;;;;;;3144:548:12:o;2409:1283:57:-;2602:11;;2768:4;2762:11;;2862:19;;;2883:2;2858:28;2845:42;;;2933:22;;;2762:11;2585:14;3029:657;3053:6;3049:1;:10;3029:657;;;3135:12;3177:3;;3182:1;3160:24;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3160:24:57;;;;;;;;;3150:35;;3160:24;3150:35;;;;3373:21;;;;;3367:28;3461:13;3631:23;;;;;3624:38;3061:7;;-1:-1:-1;3387:1:57;3061:7;:::i;:::-;;;3029:657;;;;2523:1169;2409:1283;;;;;:::o;565:34:54:-;;;;;;;:::i;9564:172:25:-;9621:4;9684:13;;9674:7;:23;9644:85;;;;-1:-1:-1;;9702:20:25;;;;:11;:20;;;;;:27;-1:-1:-1;;;9702:27:25;;;;9701:28;;9564:172::o;1866:477:68:-;2055:19;;;;2051:286;;;905:42;2094:45;:49;2090:237;;2168:67;;-1:-1:-1;;;2168:67:68;;905:42;;2168;;:67;;2219:4;;2226:8;;2168:67;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2163:150;;2285:8;2266:28;;-1:-1:-1;;;2266:28:68;;;;;;;;:::i;7170:392:25:-;7250:13;7266:24;7282:7;7266:15;:24::i;:::-;7250:40;;7310:5;-1:-1:-1;;;;;7304:11:25;:2;-1:-1:-1;;;;;7304:11:25;;7300:48;;;7324:24;;-1:-1:-1;;;7324:24:25;;;;;;;;;;;7300:48;719:10:232;-1:-1:-1;;;;;7363:21:25;;;7359:158;;7403:37;7420:5;719:10:232;8238:162:25;:::i;7403:37::-;7398:119;;7467:35;;-1:-1:-1;;;7467:35:25;;;;;;;;;;;7398:119;7527:28;7536:2;7540:7;7549:5;7527:8;:28::i;9454:115:14:-;9518:4;9555:7;:5;:7::i;:::-;-1:-1:-1;;;;;9541:21:14;:10;-1:-1:-1;;;;;9541:21:14;;9534:28;;9454:115;:::o;1421:172:70:-;1501:6;;;-1:-1:-1;;;;;1517:18:70;;;-1:-1:-1;;;;;;1517:18:70;;;;;;;1551:35;;1501:6;;;1517:18;1501:6;;1551:35;;1480:18;;1551:35;1470:123;1421:172;:::o;8462:164:25:-;8591:28;8601:4;8607:2;8611:7;8591:9;:28::i;457:160:67:-;528:19;:34;;-1:-1:-1;;528:34:67;;;;;;;;;;577:33;;540:41:635;;;577:33:67;;528:2:635;513:18;577:33:67;;;;;;;457:160;:::o;8692:179:25:-;8825:39;8842:4;8848:2;8852:7;8825:39;;;;;;;;;;;;:16;:39::i;16079:2355::-;16158:35;16196:21;16209:7;16196:12;:21::i;:::-;16243:18;;16158:59;;-1:-1:-1;16272:284:25;;;;16305:22;719:10:232;-1:-1:-1;;;;;16331:20:25;;;;:76;;-1:-1:-1;16371:36:25;16388:4;719:10:232;8238:162:25;:::i;16371:36::-;16331:132;;;-1:-1:-1;719:10:232;16427:20:25;16439:7;16427:11;:20::i;:::-;-1:-1:-1;;;;;16427:36:25;;16331:132;16305:159;;16484:17;16479:66;;16510:35;;-1:-1:-1;;;16510:35:25;;;;;;;;;;;16479:66;16291:265;16272:284;16679:35;16696:1;16700:7;16709:4;16679:8;:35::i;:::-;-1:-1:-1;;;;;17038:18:25;;;17004:31;17038:18;;;:12;:18;;;;;;;;17070:24;;-1:-1:-1;;;;;;;;;;17070:24:25;;;;;;;;;-1:-1:-1;;;;;;17070:24:25;;;;17108:29;;;;;17093:1;17108:29;;;;;;;;-1:-1:-1;;;;;;17108:29:25;;;;;;;;;;17267:20;;;:11;:20;;;;;;17301;;-1:-1:-1;;;;17368:15:25;17335:49;;;-1:-1:-1;;;17335:49:25;-1:-1:-1;;;;;;17335:49:25;;;;;;;;;;17398:22;-1:-1:-1;;;17398:22:25;;;17686:11;;;17745:24;;;;;17787:13;;17038:18;;17745:24;;17787:13;17783:377;;17994:13;;17979:11;:28;17975:171;;18031:20;;18099:28;;;;-1:-1:-1;;;;;18073:54:25;-1:-1:-1;;;18073:54:25;-1:-1:-1;;;;;;18073:54:25;;;-1:-1:-1;;;;;18031:20:25;;18073:54;;;;17975:171;-1:-1:-1;;18185:35:25;;18212:7;;-1:-1:-1;18208:1:25;;-1:-1:-1;;;;;;18185:35:25;;;-1:-1:-1;;;;;;;;;;;18185:35:25;18208:1;;18185:35;-1:-1:-1;;18403:12:25;:14;;;;;;-1:-1:-1;;16079:2355:25:o;2349:783:68:-;905:42;2484:45;:49;2480:646;;-1:-1:-1;;;;;2607:51:68;;;:55;2603:513;;2730:9;2726:289;;;2763:92;;-1:-1:-1;;;2763:92:68;;905:42;;2763:45;;:92;;2817:4;;2824:30;;2763:92;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5791:80:14;;:::o;2726:289:68:-;2902:94;;-1:-1:-1;;;2902:94:68;;905:42;;2902:47;;:94;;2958:4;;2965:30;;2902:94;;;:::i;2603:513::-;3053:48;;-1:-1:-1;;;3053:48:68;;905:42;;3053:33;;:48;;3095:4;;3053:48;;;:::i;3430:334:77:-;3549:6;3535:11;:20;3531:76;;;3571:25;;-1:-1:-1;;;3571:25:77;;;;;;;:::i;3531:76::-;3617:16;:36;;-1:-1:-1;;;;;3617:36:77;;-1:-1:-1;;;;;;3663:32:77;;;;;-1:-1:-1;;;3663:32:77;;;;;;;;3711:46;;2510:25:635;;;3711:46:77;;2498:2:635;2483:18;3711:46:77;;;;;;;3430:334;;:::o;4721:1174:25:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;4831:7:25;4929:13;;4922:4;:20;4918:913;;;4966:31;5000:17;;;:11;:17;;;;;;;;;4966:51;;;;;;;;;-1:-1:-1;;;;;4966:51:25;;;;-1:-1:-1;;;4966:51:25;;-1:-1:-1;;;;;4966:51:25;;;;;;;;-1:-1:-1;;;4966:51:25;;;;;;;;;;;;;;5039:774;;5092:14;;-1:-1:-1;;;;;5092:28:25;;5088:107;;5159:9;4721:1174;-1:-1:-1;;;4721:1174:25:o;5088:107::-;-1:-1:-1;;;5555:6:25;5603:17;;;;:11;:17;;;;;;;;;5591:29;;;;;;;;;-1:-1:-1;;;;;5591:29:25;;;;;-1:-1:-1;;;5591:29:25;;-1:-1:-1;;;;;5591:29:25;;;;;;;;-1:-1:-1;;;5591:29:25;;;;;;;;;;;;;5654:28;5650:115;;5725:9;4721:1174;-1:-1:-1;;;4721:1174:25:o;5650:115::-;5512:279;;;4944:887;4918:913;5857:31;;-1:-1:-1;;;5857:31:25;;;;;;;;;;;1273:185:54;1339:21;1363:11;1339:35;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1384:18:54;;1339:35;;-1:-1:-1;1384:18:54;;:11;;-1:-1:-1;1384:18:54;;;;-1:-1:-1;1384:18:54;-1:-1:-1;1384:18:54;:::i;:::-;;1418:33;1437:7;1446:4;1418:33;;;;;;;:::i;:::-;;;;;;;;1329:129;1273:185;:::o;4671:362:77:-;4818:6;4811:4;:13;4807:69;;;4840:25;;-1:-1:-1;;;4840:25:77;;;;;;;:::i;4807:69::-;4918:49;;;;;;;;-1:-1:-1;;;;;4918:49:77;;;;;;;;;;;;;-1:-1:-1;4886:29:77;;;:19;:29;;;;;:81;;;;-1:-1:-1;;;;;;4886:81:77;;;;;;;;;;;-1:-1:-1;4886:81:77;;;;;;;4983:43;;2510:25:635;;;4918:49:77;;4886:29;;4983:43;;2483:18:635;4983:43:77;;;;;;;4671:362;;;:::o;7890:282:25:-;-1:-1:-1;;;;;7988:24:25;;719:10:232;7988:24:25;7984:54;;;8021:17;;-1:-1:-1;;;8021:17:25;;;;;;;;;;;7984:54;719:10:232;8049:32:25;;;;:18;:32;;;;;;;;-1:-1:-1;;;;;8049:42:25;;;;;;;;;;;;:53;;-1:-1:-1;;8049:53:25;;;;;;;;;;8117:48;;540:41:635;;;8049:42:25;;719:10:232;8117:48:25;;513:18:635;8117:48:25;;;;;;;7890:282;;:::o;8714:232:14:-;8834:20;8885:13;8908:31;8918:9;8929;8908;:31::i;6538:198:286:-;6621:12;6652:77;6673:6;6681:4;6652:77;;;;;;;;;;;;;;;;;:20;:77::i;:::-;6645:84;6538:198;-1:-1:-1;;;6538:198:286:o;8937:381:25:-;9098:28;9108:4;9114:2;9118:7;9098:9;:28::i;:::-;9140:15;:2;-1:-1:-1;;;;;9140:13:25;;:15::i;:::-;9136:176;;;9174:56;9205:4;9211:2;9215:7;9224:5;9174:30;:56::i;:::-;9169:143;;9257:40;;-1:-1:-1;;;9257:40:25;;;;;;;;;;;1568:471:52;1630:15;1647:13;1672:25;1700:17;1054:8;:15;;980:96;1700:17;1672:45;;1727:24;1754:8;1727:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1778:9;1773:224;1797:17;1793:1;:21;1773:224;;;1853:7;1861:1;1853:10;;;;;;;;:::i;:::-;;;;;;;1842:8;:21;1838:149;;;1891:1;1883:9;;1920:7;1928:1;1920:10;;;;;;;;:::i;:::-;;;;;;;1910:20;;1949:23;;;1568:471;;;:::o;1838:149::-;1816:6;1821:1;1816:6;;:::i;:::-;;;1773:224;;;-1:-1:-1;2007:25:52;;-1:-1:-1;;;2007:25:52;;20487:2:635;2007:25:52;;;20469:21:635;20526:2;20506:18;;;20499:30;-1:-1:-1;;;20545:18:635;;;20538:45;20600:18;;2007:25:52;20285:339:635;2153:390:52;2215:13;2240:25;2268:17;1054:8;:15;;980:96;2268:17;2240:45;;2295:24;2322:8;2295:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2346:9;2341:161;2365:17;2361:1;:21;2341:161;;;2421:7;2429:1;2421:10;;;;;;;;:::i;:::-;;;;;;;2410:8;:21;2406:86;;;2458:7;:19;2466:7;2474:1;2466:10;;;;;;;;:::i;:::-;;;;;;;2458:19;;;;;;;;;;;2451:26;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2153:390;;;:::o;2406:86::-;2384:6;2389:1;2384:6;;:::i;:::-;;;2341:161;;305:703:290;361:13;578:10;574:51;;-1:-1:-1;;604:10:290;;;;;;;;;;;;-1:-1:-1;;;604:10:290;;;;;305:703::o;574:51::-;649:5;634:12;688:75;695:9;;688:75;;720:8;;;;:::i;:::-;;-1:-1:-1;742:10:290;;-1:-1:-1;750:2:290;742:10;;:::i;:::-;;;688:75;;;772:19;804:6;-1:-1:-1;;;;;794:17:290;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;794:17:290;;772:39;;821:150;828:10;;821:150;;854:11;864:1;854:11;;:::i;:::-;;-1:-1:-1;922:10:290;930:2;922:5;:10;:::i;:::-;909:24;;:2;:24;:::i;:::-;896:39;;879:6;886;879:14;;;;;;;;:::i;:::-;;;;:56;-1:-1:-1;;;;;879:56:290;;;;;;;;-1:-1:-1;949:11:290;958:2;949:11;;:::i;:::-;;;821:150;;;994:6;305:703;-1:-1:-1;;;;305:703:290:o;678:140:57:-;771:23;;;;:13;:23;;;;;;;;:40;;;;;;;;:::i;2628:117:52:-;2710:17;;;;:7;:17;;;;;;;;:28;;;;;;;;:::i;1254:592:63:-;1409:15;1441:14;:12;:14::i;:::-;1436:70;;1471:24;;-1:-1:-1;;;1471:24:63;;;;;;;:::i;1436:70::-;1520:12;1516:58;;1548:15;;-1:-1:-1;;;1548:15:63;;21078:2:635;1548:15:63;;;21060:21:635;21117:1;21097:18;;;21090:29;-1:-1:-1;;;21135:18:635;;;21128:35;21180:18;;1548:15:63;20876:328:635;1516:58:63;1584:15;1602:21;;1584:39;;1669:55;1688:7;1697;1706:17;;1669:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1669:18:63;;-1:-1:-1;;;1669:55:63:i;:::-;1635:21;1634:90;;;;;-1:-1:-1;1757:7:63;1740:74;1786:1;1766:17;1776:7;1757;1766:17;:::i;:::-;:21;;;;:::i;:::-;1789:17;;1808:5;;1740:74;;;;;;;;;;:::i;:::-;;;;;;;;1825:14;1254:592;;;;;;;:::o;18545:189:25:-;18655:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;;;;;18655:29:25;-1:-1:-1;;;;;18655:29:25;;;;;;;;;18699:28;;18655:24;;18699:28;;;;;;;18545:189;;;:::o;13620:2082::-;13730:35;13768:21;13781:7;13768:12;:21::i;:::-;13730:59;;13826:4;-1:-1:-1;;;;;13804:26:25;:13;:18;;;-1:-1:-1;;;;;13804:26:25;;13800:67;;13839:28;;-1:-1:-1;;;13839:28:25;;;;;;;;;;;13800:67;13878:22;719:10:232;-1:-1:-1;;;;;13904:20:25;;;;:72;;-1:-1:-1;13940:36:25;13957:4;719:10:232;8238:162:25;:::i;13940:36::-;13904:124;;;-1:-1:-1;719:10:232;13992:20:25;14004:7;13992:11;:20::i;:::-;-1:-1:-1;;;;;13992:36:25;;13904:124;13878:151;;14045:17;14040:66;;14071:35;;-1:-1:-1;;;14071:35:25;;;;;;;;;;;14040:66;-1:-1:-1;;;;;14120:16:25;;14116:52;;14145:23;;-1:-1:-1;;;14145:23:25;;;;;;;;;;;14116:52;14284:35;14301:1;14305:7;14314:4;14284:8;:35::i;:::-;-1:-1:-1;;;;;14609:18:25;;;;;;;:12;:18;;;;;;;;:31;;-1:-1:-1;;;;;;14609:31:25;;;-1:-1:-1;;;;;14609:31:25;;;-1:-1:-1;;14609:31:25;;;;;;;14654:16;;;;;;;;;:29;;;;;;;;-1:-1:-1;14654:29:25;;;;;;;;;;;14732:20;;;:11;:20;;;;;;14766:18;;-1:-1:-1;;;;;;14798:49:25;;;;-1:-1:-1;;;14831:15:25;14798:49;;;;;;;;;;15117:11;;15176:24;;;;;15218:13;;14732:20;;15176:24;;15218:13;15214:377;;15425:13;;15410:11;:28;15406:171;;15462:20;;15530:28;;;;-1:-1:-1;;;;;15504:54:25;-1:-1:-1;;;15504:54:25;-1:-1:-1;;;;;;15504:54:25;;;-1:-1:-1;;;;;15462:20:25;;15504:54;;;;15406:171;14585:1016;;;15635:7;15631:2;-1:-1:-1;;;;;15616:27:25;15625:4;-1:-1:-1;;;;;15616:27:25;-1:-1:-1;;;;;;;;;;;15616:27:25;;;;;;;;;15653:42;7364:208:14;9815:102:25;9883:27;9893:2;9897:8;9883:27;;;;;;;;;;;;:9;:27::i;6922:387:286:-;7063:12;7095:18;7106:6;7095:10;:18::i;:::-;7087:69;;;;-1:-1:-1;;;7087:69:286;;22194:2:635;7087:69:286;;;22176:21:635;22233:2;22213:18;;;22206:30;22272:34;22252:18;;;22245:62;-1:-1:-1;;;22323:18:635;;;22316:36;22369:19;;7087:69:286;21992:402:635;7087:69:286;7168:12;7182:23;7209:6;-1:-1:-1;;;;;7209:19:286;7229:4;7209:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7167:67;;;;7251:51;7268:7;7277:10;7289:12;7251:16;:51::i;1137:320::-;-1:-1:-1;;;;;1427:19:286;;:23;;;1137:320::o;19215:650:25:-;19393:72;;-1:-1:-1;;;19393:72:25;;19373:4;;-1:-1:-1;;;;;19393:36:25;;;;;:72;;719:10:232;;19444:4:25;;19450:7;;19459:5;;19393:72;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19393:72:25;;;;;;;;-1:-1:-1;;19393:72:25;;;;;;;;;;;;:::i;:::-;;;19389:470;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;19624:13:25;;19620:229;;19669:40;;-1:-1:-1;;;19669:40:25;;;;;;;;;;;19620:229;19809:6;19803:13;19794:6;19790:2;19786:15;19779:38;19389:470;-1:-1:-1;;;;;;19511:55:25;-1:-1:-1;;;19511:55:25;;-1:-1:-1;19215:650:25;;;;;;:::o;2840:362:52:-;2990:25;;3054:24;3065:13;3054:8;:24;:::i;:::-;3126:8;:22;;;;;;;;;;;;;-1:-1:-1;3159:16:52;;;:7;3126:22;3159:16;;;;;;;:36;;3044:34;;-1:-1:-1;3044:34:52;;-1:-1:-1;3159:36:52;;:16;;:36;;;;:::i;:::-;;2840:362;;;;;;:::o;10277:1708:25:-;10395:20;10418:13;-1:-1:-1;;;;;10445:16:25;;10441:48;;10470:19;;-1:-1:-1;;;10470:19:25;;;;;;;;;;;10441:48;10503:13;10499:44;;10525:18;;-1:-1:-1;;;10525:18:25;;;;;;;;;;;10499:44;-1:-1:-1;;;;;10886:16:25;;;;;;:12;:16;;;;;;;;:44;;-1:-1:-1;;;;;;10944:49:25;;-1:-1:-1;;;;;10886:44:25;;;;;;;10944:49;;;-1:-1:-1;;;;;;;;;10886:44:25;;;;;;10944:49;;;;;;;;;;;;;;;;11008:25;;;:11;:25;;;;;;:35;;-1:-1:-1;;;;;;11057:66:25;;;-1:-1:-1;;;11107:15:25;11057:66;;;;;;;;;;;;;11008:25;;11201:23;;;;11243:15;;:13;:15::i;:::-;11239:618;;;11278:308;11308:38;;11333:12;;-1:-1:-1;;;;;11308:38:25;;;11325:1;;-1:-1:-1;;;;;;;;;;;11308:38:25;11325:1;;11308:38;11373:69;11412:1;11416:2;11420:14;;;;;;11436:5;11373:30;:69::i;:::-;11368:172;;11477:40;;-1:-1:-1;;;11477:40:25;;;;;;;;;;;11368:172;11581:3;11566:12;:18;11278:308;;11665:12;11648:13;;:29;11644:43;;11679:8;;;11644:43;11239:618;;;11726:117;11756:40;;11781:14;;;;;-1:-1:-1;;;;;11756:40:25;;;11773:1;;-1:-1:-1;;;;;;;;;;;11756:40:25;11773:1;;11756:40;11838:3;11823:12;:18;11726:117;;11239:618;-1:-1:-1;11870:13:25;:28;;;11918:60;;11951:2;11955:12;11969:8;11918:60;:::i;7529:692:286:-;7675:12;7703:7;7699:516;;;-1:-1:-1;7733:10:286;7726:17;;7699:516;7844:17;;:21;7840:365;;8038:10;8032:17;8098:15;8085:10;8081:2;8077:19;8070:44;7840:365;8177:12;8170:20;;-1:-1:-1;;;8170:20:286;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:131:635;-1:-1:-1;;;;;;88:32:635;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:258::-;664:1;674:113;688:6;685:1;682:13;674:113;;;764:11;;;758:18;745:11;;;738:39;710:2;703:10;674:113;;;805:6;802:1;799:13;796:48;;;-1:-1:-1;;840:1:635;822:16;;815:27;592:258::o;855:::-;897:3;935:5;929:12;962:6;957:3;950:19;978:63;1034:6;1027:4;1022:3;1018:14;1011:4;1004:5;1000:16;978:63;:::i;:::-;1095:2;1074:15;-1:-1:-1;;1070:29:635;1061:39;;;;1102:4;1057:50;;855:258;-1:-1:-1;;855:258:635:o;1118:220::-;1267:2;1256:9;1249:21;1230:4;1287:45;1328:2;1317:9;1313:18;1305:6;1287:45;:::i;1343:180::-;1402:6;1455:2;1443:9;1434:7;1430:23;1426:32;1423:52;;;1471:1;1468;1461:12;1423:52;-1:-1:-1;1494:23:635;;1343:180;-1:-1:-1;1343:180:635:o;1528:203::-;-1:-1:-1;;;;;1692:32:635;;;;1674:51;;1662:2;1647:18;;1528:203::o;1736:173::-;1804:20;;-1:-1:-1;;;;;1853:31:635;;1843:42;;1833:70;;1899:1;1896;1889:12;1833:70;1736:173;;;:::o;1914:254::-;1982:6;1990;2043:2;2031:9;2022:7;2018:23;2014:32;2011:52;;;2059:1;2056;2049:12;2011:52;2082:29;2101:9;2082:29;:::i;:::-;2072:39;2158:2;2143:18;;;;2130:32;;-1:-1:-1;;;1914:254:635:o;2173:186::-;2232:6;2285:2;2273:9;2264:7;2260:23;2256:32;2253:52;;;2301:1;2298;2291:12;2253:52;2324:29;2343:9;2324:29;:::i;2546:328::-;2623:6;2631;2639;2692:2;2680:9;2671:7;2667:23;2663:32;2660:52;;;2708:1;2705;2698:12;2660:52;2731:29;2750:9;2731:29;:::i;:::-;2721:39;;2779:38;2813:2;2802:9;2798:18;2779:38;:::i;:::-;2769:48;;2864:2;2853:9;2849:18;2836:32;2826:42;;2546:328;;;;;:::o;2879:248::-;2947:6;2955;3008:2;2996:9;2987:7;2983:23;2979:32;2976:52;;;3024:1;3021;3014:12;2976:52;-1:-1:-1;;3047:23:635;;;3117:2;3102:18;;;3089:32;;-1:-1:-1;2879:248:635:o;3411:118::-;3497:5;3490:13;3483:21;3476:5;3473:32;3463:60;;3519:1;3516;3509:12;3534:241;3590:6;3643:2;3631:9;3622:7;3618:23;3614:32;3611:52;;;3659:1;3656;3649:12;3611:52;3698:9;3685:23;3717:28;3739:5;3717:28;:::i;4311:127::-;4372:10;4367:3;4363:20;4360:1;4353:31;4403:4;4400:1;4393:15;4427:4;4424:1;4417:15;4443:275;4514:2;4508:9;4579:2;4560:13;;-1:-1:-1;;4556:27:635;4544:40;;-1:-1:-1;;;;;4599:34:635;;4635:22;;;4596:62;4593:88;;;4661:18;;:::i;:::-;4697:2;4690:22;4443:275;;-1:-1:-1;4443:275:635:o;4723:187::-;4772:4;-1:-1:-1;;;;;4797:6:635;4794:30;4791:56;;;4827:18;;:::i;:::-;-1:-1:-1;4893:2:635;4872:15;-1:-1:-1;;4868:29:635;4899:4;4864:40;;4723:187::o;4915:338::-;4980:5;5009:53;5025:36;5054:6;5025:36;:::i;:::-;5009:53;:::i;:::-;5000:62;;5085:6;5078:5;5071:21;5125:3;5116:6;5111:3;5107:16;5104:25;5101:45;;;5142:1;5139;5132:12;5101:45;5191:6;5186:3;5179:4;5172:5;5168:16;5155:43;5245:1;5238:4;5229:6;5222:5;5218:18;5214:29;5207:40;4915:338;;;;;:::o;5258:451::-;5327:6;5380:2;5368:9;5359:7;5355:23;5351:32;5348:52;;;5396:1;5393;5386:12;5348:52;5436:9;5423:23;-1:-1:-1;;;;;5461:6:635;5458:30;5455:50;;;5501:1;5498;5491:12;5455:50;5524:22;;5577:4;5569:13;;5565:27;-1:-1:-1;5555:55:635;;5606:1;5603;5596:12;5555:55;5629:74;5695:7;5690:2;5677:16;5672:2;5668;5664:11;5629:74;:::i;5714:322::-;5791:6;5799;5807;5860:2;5848:9;5839:7;5835:23;5831:32;5828:52;;;5876:1;5873;5866:12;5828:52;5912:9;5899:23;5889:33;;5941:38;5975:2;5964:9;5960:18;5941:38;:::i;6041:347::-;6092:8;6102:6;6156:3;6149:4;6141:6;6137:17;6133:27;6123:55;;6174:1;6171;6164:12;6123:55;-1:-1:-1;6197:20:635;;-1:-1:-1;;;;;6229:30:635;;6226:50;;;6272:1;6269;6262:12;6226:50;6309:4;6301:6;6297:17;6285:29;;6361:3;6354:4;6345:6;6337;6333:19;6329:30;6326:39;6323:59;;;6378:1;6375;6368:12;6323:59;6041:347;;;;;:::o;6393:477::-;6472:6;6480;6488;6541:2;6529:9;6520:7;6516:23;6512:32;6509:52;;;6557:1;6554;6547:12;6509:52;6593:9;6580:23;6570:33;;6654:2;6643:9;6639:18;6626:32;-1:-1:-1;;;;;6673:6:635;6670:30;6667:50;;;6713:1;6710;6703:12;6667:50;6752:58;6802:7;6793:6;6782:9;6778:22;6752:58;:::i;:::-;6393:477;;6829:8;;-1:-1:-1;6726:84:635;;-1:-1:-1;;;;6393:477:635:o;7098:315::-;7163:6;7171;7224:2;7212:9;7203:7;7199:23;7195:32;7192:52;;;7240:1;7237;7230:12;7192:52;7263:29;7282:9;7263:29;:::i;:::-;7253:39;;7342:2;7331:9;7327:18;7314:32;7355:28;7377:5;7355:28;:::i;:::-;7402:5;7392:15;;;7098:315;;;;;:::o;7418:626::-;7515:6;7523;7576:2;7564:9;7555:7;7551:23;7547:32;7544:52;;;7592:1;7589;7582:12;7544:52;7632:9;7619:23;-1:-1:-1;;;;;7702:2:635;7694:6;7691:14;7688:34;;;7718:1;7715;7708:12;7688:34;7756:6;7745:9;7741:22;7731:32;;7801:7;7794:4;7790:2;7786:13;7782:27;7772:55;;7823:1;7820;7813:12;7772:55;7863:2;7850:16;7889:2;7881:6;7878:14;7875:34;;;7905:1;7902;7895:12;7875:34;7958:7;7953:2;7943:6;7940:1;7936:14;7932:2;7928:23;7924:32;7921:45;7918:65;;;7979:1;7976;7969:12;7918:65;8010:2;8002:11;;;;;8032:6;;-1:-1:-1;7418:626:635;;-1:-1:-1;;;;7418:626:635:o;8049:801::-;8209:4;8238:2;8278;8267:9;8263:18;8308:2;8297:9;8290:21;8331:6;8366;8360:13;8397:6;8389;8382:22;8435:2;8424:9;8420:18;8413:25;;8497:2;8487:6;8484:1;8480:14;8469:9;8465:30;8461:39;8447:53;;8535:2;8527:6;8523:15;8556:1;8566:255;8580:6;8577:1;8574:13;8566:255;;;8673:2;8669:7;8657:9;8649:6;8645:22;8641:36;8636:3;8629:49;8701:40;8734:6;8725;8719:13;8701:40;:::i;:::-;8691:50;-1:-1:-1;8799:12:635;;;;8764:15;;;;8602:1;8595:9;8566:255;;;-1:-1:-1;8838:6:635;;8049:801;-1:-1:-1;;;;;;;8049:801:635:o;8855:221::-;8897:5;8950:3;8943:4;8935:6;8931:17;8927:27;8917:55;;8968:1;8965;8958:12;8917:55;8990:80;9066:3;9057:6;9044:20;9037:4;9029:6;9025:17;8990:80;:::i;9081:537::-;9176:6;9184;9192;9200;9253:3;9241:9;9232:7;9228:23;9224:33;9221:53;;;9270:1;9267;9260:12;9221:53;9293:29;9312:9;9293:29;:::i;:::-;9283:39;;9341:38;9375:2;9364:9;9360:18;9341:38;:::i;:::-;9331:48;;9426:2;9415:9;9411:18;9398:32;9388:42;;9481:2;9470:9;9466:18;9453:32;-1:-1:-1;;;;;9500:6:635;9497:30;9494:50;;;9540:1;9537;9530:12;9494:50;9563:49;9604:7;9595:6;9584:9;9580:22;9563:49;:::i;:::-;9553:59;;;9081:537;;;;;;;:::o;9623:786::-;9723:6;9731;9739;9747;9755;9808:2;9796:9;9787:7;9783:23;9779:32;9776:52;;;9824:1;9821;9814:12;9776:52;9860:9;9847:23;9837:33;;9921:2;9910:9;9906:18;9893:32;-1:-1:-1;;;;;9985:2:635;9977:6;9974:14;9971:34;;;10001:1;9998;9991:12;9971:34;10040:58;10090:7;10081:6;10070:9;10066:22;10040:58;:::i;:::-;10117:8;;-1:-1:-1;10014:84:635;-1:-1:-1;10205:2:635;10190:18;;10177:32;;-1:-1:-1;10221:16:635;;;10218:36;;;10250:1;10247;10240:12;10218:36;;10289:60;10341:7;10330:8;10319:9;10315:24;10289:60;:::i;:::-;9623:786;;;;-1:-1:-1;9623:786:635;;-1:-1:-1;10368:8:635;;10263:86;9623:786;-1:-1:-1;;;9623:786:635:o;10414:628::-;10502:6;10510;10518;10571:2;10559:9;10550:7;10546:23;10542:32;10539:52;;;10587:1;10584;10577:12;10539:52;10627:9;10614:23;-1:-1:-1;;;;;10697:2:635;10689:6;10686:14;10683:34;;;10713:1;10710;10703:12;10683:34;10736:49;10777:7;10768:6;10757:9;10753:22;10736:49;:::i;:::-;10726:59;;10838:2;10827:9;10823:18;10810:32;10794:48;;10867:2;10857:8;10854:16;10851:36;;;10883:1;10880;10873:12;10851:36;;10922:60;10974:7;10963:8;10952:9;10948:24;10922:60;:::i;11047:260::-;11115:6;11123;11176:2;11164:9;11155:7;11151:23;11147:32;11144:52;;;11192:1;11189;11182:12;11144:52;11215:29;11234:9;11215:29;:::i;:::-;11205:39;;11263:38;11297:2;11286:9;11282:18;11263:38;:::i;:::-;11253:48;;11047:260;;;;;:::o;11312:380::-;11391:1;11387:12;;;;11434;;;11455:61;;11509:4;11501:6;11497:17;11487:27;;11455:61;11562:2;11554:6;11551:14;11531:18;11528:38;11525:161;;;11608:10;11603:3;11599:20;11596:1;11589:31;11643:4;11640:1;11633:15;11671:4;11668:1;11661:15;11525:161;;11312:380;;;:::o;11697:338::-;11899:2;11881:21;;;11938:2;11918:18;;;11911:30;-1:-1:-1;;;11972:2:635;11957:18;;11950:44;12026:2;12011:18;;11697:338::o;12382:127::-;12443:10;12438:3;12434:20;12431:1;12424:31;12474:4;12471:1;12464:15;12498:4;12495:1;12488:15;12514:127;12575:10;12570:3;12566:20;12563:1;12556:31;12606:4;12603:1;12596:15;12630:4;12627:1;12620:15;12646:168;12686:7;12752:1;12748;12744:6;12740:14;12737:1;12734:21;12729:1;12722:9;12715:17;12711:45;12708:71;;;12759:18;;:::i;:::-;-1:-1:-1;12799:9:635;;12646:168::o;12819:127::-;12880:10;12875:3;12871:20;12868:1;12861:31;12911:4;12908:1;12901:15;12935:4;12932:1;12925:15;12951:120;12991:1;13017;13007:35;;13022:18;;:::i;:::-;-1:-1:-1;13056:9:635;;12951:120::o;14243:704::-;14331:6;14339;14392:2;14380:9;14371:7;14367:23;14363:32;14360:52;;;14408:1;14405;14398:12;14360:52;14441:9;14435:16;-1:-1:-1;;;;;14466:6:635;14463:30;14460:50;;;14506:1;14503;14496:12;14460:50;14529:22;;14582:4;14574:13;;14570:27;-1:-1:-1;14560:55:635;;14611:1;14608;14601:12;14560:55;14640:2;14634:9;14665:49;14681:32;14710:2;14681:32;:::i;14665:49::-;14737:2;14730:5;14723:17;14779:7;14772:4;14767:2;14763;14759:11;14755:22;14752:35;14749:55;;;14800:1;14797;14790:12;14749:55;14813:58;14868:2;14861:4;14854:5;14850:16;14843:4;14839:2;14835:13;14813:58;:::i;:::-;14935:4;14920:20;;;;14914:27;14890:5;;14914:27;;-1:-1:-1;;;;;14243:704:635:o;14952:525::-;15167:3;15205:6;15199:13;15221:53;15267:6;15262:3;15255:4;15247:6;15243:17;15221:53;:::i;:::-;15296:16;;15349:6;15341;15296:16;15321:35;15375:18;;;15424;;;-1:-1:-1;15466:4:635;15458:13;;14952:525;-1:-1:-1;;;14952:525:635:o;16184:128::-;16224:3;16255:1;16251:6;16248:1;16245:13;16242:39;;;16261:18;;:::i;:::-;-1:-1:-1;16297:9:635;;16184:128::o;16676:521::-;16753:4;16759:6;16819:11;16806:25;16913:2;16909:7;16898:8;16882:14;16878:29;16874:43;16854:18;16850:68;16840:96;;16932:1;16929;16922:12;16840:96;16959:33;;17011:20;;;-1:-1:-1;;;;;;17043:30:635;;17040:50;;;17086:1;17083;17076:12;17040:50;17119:4;17107:17;;-1:-1:-1;17150:14:635;17146:27;;;17136:38;;17133:58;;;17187:1;17184;17177:12;17202:135;17241:3;-1:-1:-1;;17262:17:635;;17259:43;;;17282:18;;:::i;:::-;-1:-1:-1;17329:1:635;17318:13;;17202:135::o;17342:439::-;17574:3;17612:6;17606:13;17628:53;17674:6;17669:3;17662:4;17654:6;17650:17;17628:53;:::i;:::-;-1:-1:-1;;;17703:16:635;;17728:18;;;-1:-1:-1;17773:1:635;17762:13;;17342:439;-1:-1:-1;17342:439:635:o;17786:470::-;17965:3;18003:6;17997:13;18019:53;18065:6;18060:3;18053:4;18045:6;18041:17;18019:53;:::i;:::-;18135:13;;18094:16;;;;18157:57;18135:13;18094:16;18191:4;18179:17;;18157:57;:::i;:::-;18230:20;;17786:470;-1:-1:-1;;;;17786:470:635:o;18261:388::-;18338:6;18346;18399:2;18387:9;18378:7;18374:23;18370:32;18367:52;;;18415:1;18412;18405:12;18367:52;18455:9;18442:23;-1:-1:-1;;;;;18480:6:635;18477:30;18474:50;;;18520:1;18517;18510:12;18474:50;18543:49;18584:7;18575:6;18564:9;18560:22;18543:49;:::i;:::-;18533:59;18639:2;18624:18;;;;18611:32;;-1:-1:-1;;;;18261:388:635:o;18654:335::-;18865:6;18857;18852:3;18839:33;18891:16;;;18938:18;;;18980:2;18972:11;;18654:335;-1:-1:-1;18654:335:635:o;18994:304::-;-1:-1:-1;;;;;19224:15:635;;;19206:34;;19276:15;;19271:2;19256:18;;19249:43;19156:2;19141:18;;18994:304::o;19303:245::-;19370:6;19423:2;19411:9;19402:7;19398:23;19394:32;19391:52;;;19439:1;19436;19429:12;19391:52;19471:9;19465:16;19490:28;19512:5;19490:28;:::i;19553:339::-;19755:2;19737:21;;;19794:2;19774:18;;;19767:30;-1:-1:-1;;;19828:2:635;19813:18;;19806:45;19883:2;19868:18;;19553:339::o;19897:383::-;20094:2;20083:9;20076:21;20057:4;20120:45;20161:2;20150:9;20146:18;20138:6;20120:45;:::i;:::-;20213:9;20205:6;20201:22;20196:2;20185:9;20181:18;20174:50;20241:33;20267:6;20259;20241:33;:::i;:::-;20233:41;19897:383;-1:-1:-1;;;;;19897:383:635:o;20629:125::-;20669:4;20697:1;20694;20691:8;20688:34;;;20702:18;;:::i;:::-;-1:-1:-1;20739:9:635;;20629:125::o;20759:112::-;20791:1;20817;20807:35;;20822:18;;:::i;:::-;-1:-1:-1;20856:9:635;;20759:112::o;21209:267::-;21298:6;21293:3;21286:19;21350:6;21343:5;21336:4;21331:3;21327:14;21314:43;-1:-1:-1;21402:1:635;21377:16;;;21395:4;21373:27;;;21366:38;;;;21458:2;21437:15;;;-1:-1:-1;;21433:29:635;21424:39;;;21420:50;;21209:267::o;21481:506::-;21724:6;21713:9;21706:25;21767:2;21762;21751:9;21747:18;21740:30;21687:4;21793:62;21851:2;21840:9;21836:18;21828:6;21820;21793:62;:::i;:::-;21903:9;21895:6;21891:22;21886:2;21875:9;21871:18;21864:50;21931;21974:6;21966;21958;21931:50;:::i;:::-;21923:58;21481:506;-1:-1:-1;;;;;;;;21481:506:635:o;22399:274::-;22528:3;22566:6;22560:13;22582:53;22628:6;22623:3;22616:4;22608:6;22604:17;22582:53;:::i;:::-;22651:16;;;;;22399:274;-1:-1:-1;;22399:274:635:o;22678:489::-;-1:-1:-1;;;;;22947:15:635;;;22929:34;;22999:15;;22994:2;22979:18;;22972:43;23046:2;23031:18;;23024:34;;;23094:3;23089:2;23074:18;;23067:31;;;22872:4;;23115:46;;23141:19;;23133:6;23115:46;:::i;23172:249::-;23241:6;23294:2;23282:9;23273:7;23269:23;23265:32;23262:52;;;23310:1;23307;23300:12;23262:52;23342:9;23336:16;23361:30;23385:5;23361:30;:::i",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "OPERATOR_FILTER_REGISTRY()": "41f43434",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "claim(address,uint256)": "aad3ec96",
    "contractURI()": "e8a3d485",
    "encryptDecrypt(bytes,bytes)": "e7150322",
    "encryptedData(uint256)": "a05112fc",
    "getApproved(uint256)": "081812fc",
    "getBaseURICount()": "63b45e2d",
    "getBatchIdAtIndex(uint256)": "2419f51b",
    "getDefaultRoyaltyInfo()": "b24f2d39",
    "getRevealURI(uint256,bytes)": "9fc4d68f",
    "getRoyaltyInfoForToken(uint256)": "4cc157df",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isEncryptedBatch(uint256)": "492e224b",
    "lazyMint(uint256,string,bytes)": "d37c353b",
    "multicall(bytes[])": "ac9650d8",
    "name()": "06fdde03",
    "nextTokenIdToClaim()": "acd083f8",
    "nextTokenIdToMint()": "3b1475a7",
    "operatorRestriction()": "504c6e01",
    "owner()": "8da5cb5b",
    "ownerOf(uint256)": "6352211e",
    "reveal(uint256,bytes)": "ce805642",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setContractURI(string)": "938e3d7b",
    "setDefaultRoyaltyInfo(address,uint256)": "600dd5ea",
    "setOperatorRestriction(bool)": "32f0cd64",
    "setOwner(address)": "13af4035",
    "setRoyaltyInfoForToken(uint256,address,uint256)": "9bcf7a15",
    "subscribeToRegistry(address)": "57fd8455",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "tokenURI(uint256)": "c87b56dd",
    "totalSupply()": "18160ddd",
    "transferFrom(address,address,uint256)": "23b872dd",
    "verifyClaim(address,uint256)": "2f92023a"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_royaltyBps\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prevURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"ContractURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRoyaltyBps\",\"type\":\"uint256\"}],\"name\":\"DefaultRoyalty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"restriction\",\"type\":\"bool\"}],\"name\":\"OperatorRestriction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyBps\",\"type\":\"uint256\"}],\"name\":\"RoyaltyForToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"name\":\"TokenURIRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantityClaimed\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"startTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedBaseURI\",\"type\":\"bytes\"}],\"name\":\"TokensLazyMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_FILTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"encryptDecrypt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"encryptedData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseURICount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBatchIdAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"getRevealURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoForToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchId\",\"type\":\"uint256\"}],\"name\":\"isEncryptedBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_baseURIForTokens\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"lazyMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenIdToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorRestriction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_key\",\"type\":\"bytes\"}],\"name\":\"reveal\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"revealedURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_royaltyBps\",\"type\":\"uint256\"}],\"name\":\"setDefaultRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_restriction\",\"type\":\"bool\"}],\"name\":\"setOperatorRestriction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bps\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyInfoForToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscription\",\"type\":\"address\"}],\"name\":\"subscribeToRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"verifyClaim\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {ERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"ERC721A's `_burn(uint256,bool)` internally checks for token approvals.\",\"params\":{\"_tokenId\":\"The tokenId of the NFT to burn.\"}},\"claim(address,uint256)\":{\"details\":\"The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.\",\"params\":{\"_quantity\":\"The number of NFTs to mint.\",\"_receiver\":\"The recipient of the NFT to mint.\"}},\"encryptDecrypt(bytes,bytes)\":{\"details\":\"Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain\",\"params\":{\"data\":\"Bytes of data to encrypt/decrypt.\",\"key\":\"Secure key used by caller for encryption/decryption.\"},\"returns\":{\"result\":\" Output after encryption/decryption of given data.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getBaseURICount()\":{\"details\":\"Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}.\"},\"getBatchIdAtIndex(uint256)\":{\"details\":\"See {getBaseURICount}.\",\"params\":{\"_index\":\"ID of a token.\"}},\"getRevealURI(uint256,bytes)\":{\"details\":\"Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.\",\"params\":{\"_batchId\":\"ID of the batch for which URI is being revealed.\",\"_key\":\"Secure key used by caller/admin for encryption of baseURI.\"},\"returns\":{\"revealedURI\":\"Decrypted base URI.\"}},\"getRoyaltyInfoForToken(uint256)\":{\"details\":\"Returns royalty recipient and bps for `_tokenId`.\",\"params\":{\"_tokenId\":\"The tokenID of the NFT for which to query royalty info.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isEncryptedBatch(uint256)\":{\"details\":\"Returns `true` if `_batchId`'s base URI is encrypted.\",\"params\":{\"_batchId\":\"ID of a batch of NFTs.\"}},\"lazyMint(uint256,string,bytes)\":{\"params\":{\"_amount\":\"The number of NFTs to lazy mint.\",\"_baseURIForTokens\":\"The placeholder base URI for the 'n' number of NFTs being lazy minted, where the                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.\",\"_data\":\"The encrypted base URI + provenance hash for the batch of NFTs being lazy minted.\"},\"returns\":{\"batchId\":\"         A unique integer identifier for the batch of NFTs lazy minted together.\"}},\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"The bytes data that makes up the batch of function calls to execute.\"},\"returns\":{\"results\":\"The bytes data that makes up the result of the batch of function calls executed.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"reveal(uint256,bytes)\":{\"params\":{\"_index\":\"The ID for the batch of delayed-reveal NFTs to reveal.\",\"_key\":\"The key with which the base URI for the relevant batch of NFTs was encrypted.\"}},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns royalty amount and recipient for `tokenId` and `salePrice`.\",\"params\":{\"salePrice\":\"Sale price of the token.\",\"tokenId\":\"The tokenID of the NFT for which to query royalty info.\"},\"returns\":{\"receiver\":\"       Address of royalty recipient account.\",\"royaltyAmount\":\"  Royalty amount calculated at current royaltyBps value.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {ERC721-_safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {ERC721-_safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {ERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.\",\"params\":{\"_uri\":\"keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\"}},\"setDefaultRoyaltyInfo(address,uint256)\":{\"details\":\"Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.\",\"params\":{\"_royaltyBps\":\"Updated royalty bps.\",\"_royaltyRecipient\":\"Address to be set as default royalty recipient.\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The address to set as the new owner of the contract.\"}},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"details\":\"Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.\",\"params\":{\"_bps\":\"Updated royalty bps for the token Id.\",\"_recipient\":\"Address to be set as royalty recipient for given token Id.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See ERC165: https://eips.ethereum.org/EIPS/eip-165\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See `BatchMintMetadata` for handling of metadata in this contract.\",\"params\":{\"_tokenId\":\"The tokenId of an NFT.\"}},\"totalSupply()\":{\"details\":\"Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {ERC721-_transferFrom}.\"},\"verifyClaim(address,uint256)\":{\"details\":\"Checks a request to claim NFTs against a custom condition.\",\"params\":{\"_claimer\":\"Caller of the claim function.\",\"_quantity\":\"The number of NFTs being claimed.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"ApprovalToCurrentOwner()\":[{\"notice\":\"The caller cannot approve to the current owner.\"}],\"ApproveToCaller()\":[{\"notice\":\"The caller cannot approve to their own address.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Lets an owner or approved operator burn the NFT of the given tokenId.\"},\"claim(address,uint256)\":{\"notice\":\"Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc.\"},\"contractURI()\":{\"notice\":\"Returns the contract metadata URI.\"},\"encryptDecrypt(bytes,bytes)\":{\"notice\":\"Encrypt/decrypt data on chain.\"},\"getBaseURICount()\":{\"notice\":\"Returns the count of batches of NFTs.\"},\"getBatchIdAtIndex(uint256)\":{\"notice\":\"Returns the ID for the batch of tokens the given tokenId belongs to.\"},\"getDefaultRoyaltyInfo()\":{\"notice\":\"Returns the defualt royalty recipient and BPS for this contract's NFTs.\"},\"getRevealURI(uint256,bytes)\":{\"notice\":\"Returns revealed URI for a batch of NFTs.\"},\"getRoyaltyInfoForToken(uint256)\":{\"notice\":\"View royalty info for a given token.\"},\"isEncryptedBatch(uint256)\":{\"notice\":\"Returns whether the relvant batch of NFTs is subject to a delayed reveal.\"},\"lazyMint(uint256,string,bytes)\":{\"notice\":\"Lets an authorized address lazy mint a given amount of NFTs.\"},\"multicall(bytes[])\":{\"notice\":\"Receives and executes a batch of function calls on this contract.\"},\"nextTokenIdToClaim()\":{\"notice\":\"The tokenId assigned to the next new NFT to be claimed.\"},\"nextTokenIdToMint()\":{\"notice\":\"The tokenId assigned to the next new NFT to be lazy minted.\"},\"owner()\":{\"notice\":\"Returns the owner of the contract.\"},\"reveal(uint256,bytes)\":{\"notice\":\"Lets an authorized address reveal a batch of delayed reveal NFTs.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"View royalty info for a given token and sale price.\"},\"setContractURI(string)\":{\"notice\":\"Lets a contract admin set the URI for contract-level metadata.\"},\"setDefaultRoyaltyInfo(address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps.\"},\"setOwner(address)\":{\"notice\":\"Lets an authorized wallet set a new owner for the contract.\"},\"setRoyaltyInfoForToken(uint256,address,uint256)\":{\"notice\":\"Updates default royalty recipient and bps for a particular token.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the metadata URI for an NFT.\"},\"verifyClaim(address,uint256)\":{\"notice\":\"Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc.\"}},\"notice\":\"BASE:      ERC721LazyMint      EXTENSION: DelayedReveal  The `ERC721DelayedReveal` contract uses the `ERC721LazyMint` contract, along with `DelayedReveal` extension.  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'  of  NFTs means actually assigning an owner to an NFT.  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,  without paying the gas cost for actually minting the NFTs.  'Delayed reveal' is a mechanism by which you can distribute NFTs to your audience and reveal the metadata of the distributed  NFTs, after the fact.  You can read more about how the `DelayedReveal` extension works, here: https://blog.thirdweb.com/delayed-reveal-nfts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/base/ERC721DelayedReveal.sol\":\"ERC721DelayedReveal\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[\":@chainlink/=lib/chainlink/\",\":@ds-test/=lib/ds-test/src/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@std/=lib/forge-std/src/\",\":@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/\",\":ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/\",\":contracts/=contracts/\",\":ds-test/=lib/ds-test/src/\",\":dynamic-contracts/=lib/dynamic-contracts/src/\",\":erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/\",\":erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\":erc721a/=lib/ERC721A/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"contracts/base/ERC721DelayedReveal.sol\":{\"keccak256\":\"0x26fb990be42644a7287f807cd60cd3b3e7249d763c377a57fa6c90c1202b1b7b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://d91555f6d1c79ef4da8b5407b5da65c62557ae0be9118dba4ddad7e6b240804c\",\"dweb:/ipfs/QmZqHCkKVybfra1hmPNtsyqwUFgtyF3VtfY99upLNCQUAj\"]},\"contracts/base/ERC721LazyMint.sol\":{\"keccak256\":\"0xfb72132942d42950b16d0fcafdbebff87f7e7f42f6b4c9ca6fec4b8a27a3bbaf\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://525fad027b1a6f19f94a68b04ac7d2cdade6e943b9f9d7e51b47187dd0447d2f\",\"dweb:/ipfs/QmfXZn34Yg4ZoM21n74oP6QrBtczbUotjD6VQf12kLmkpD\"]},\"contracts/eip/ERC165.sol\":{\"keccak256\":\"0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c\",\"dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr\"]},\"contracts/eip/ERC721AVirtualApprove.sol\":{\"keccak256\":\"0xbc6fe5974d321406155a86d7f29748cad13fe632b5012e2d4979ccf238538516\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d80796f25af8c6507cd1f663c040d4e0c4b09f9d03544b50ead0d36cbbd5ea22\",\"dweb:/ipfs/QmPA5KLaxvbLbPbovSvMMgpj3H2Kj6kUU3s2V5qsgpfqGA\"]},\"contracts/eip/interface/IERC165.sol\":{\"keccak256\":\"0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a\",\"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R\"]},\"contracts/eip/interface/IERC2981.sol\":{\"keccak256\":\"0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf\",\"dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He\"]},\"contracts/eip/interface/IERC721.sol\":{\"keccak256\":\"0xbd9f2dd131e8f1e4e50b1b116eae917510ab9bf5d4356de37c5daf4cffdfa049\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ac3530b317083464271b100de1976ed9179b9e7d5a4fc3d992c61c80676a676\",\"dweb:/ipfs/QmUq1AVzymvp7Y8H1eypGEGU4icjzn5vDSvKMNpXnoaeMT\"]},\"contracts/eip/interface/IERC721A.sol\":{\"keccak256\":\"0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8\",\"dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5\"]},\"contracts/eip/interface/IERC721Metadata.sol\":{\"keccak256\":\"0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e\",\"dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4\"]},\"contracts/eip/interface/IERC721Receiver.sol\":{\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f\",\"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a\"]},\"contracts/extension/BatchMintMetadata.sol\":{\"keccak256\":\"0xc0aa1014d8e7dac53199204ea1e95d2488ad5aa85420d97853d3f8dee96f5f67\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://e7ebb973ce9804b0ef03b0a6336dd4da4ace59543ab499fe84ba60f8495ee8d7\",\"dweb:/ipfs/Qmdee8gPVFtQ6sP44bRdtKVkykm8Q41bpxfFrPfXkaxRt5\"]},\"contracts/extension/ContractMetadata.sol\":{\"keccak256\":\"0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392\",\"dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6\"]},\"contracts/extension/DefaultOperatorFilterer.sol\":{\"keccak256\":\"0xbd2d5c15430a1428c354148f46472ada3b5fc741c5dfc095b29b21c31bc6733a\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://5ed920e97d76272b856f6a61af2bd57037baa546cf8e37b52dd924103f0cf0bd\",\"dweb:/ipfs/QmWfgfUzpmF2Mcfwr7GFrDJPzYTUmUmg8DusFt9VLdrbVt\"]},\"contracts/extension/DelayedReveal.sol\":{\"keccak256\":\"0x2a860e4b857617a1c87c5fb79df2dd4a70e0e63ec6796f58ce9d0b3b93f1e242\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://cc4039ae41d23b921c13b500018e333d63dd9b3be65e700e0d05465d3ac680a3\",\"dweb:/ipfs/QmSLCVWqjVzDt9ygXmBffERFCYCo7RiGry2BhQjXcnZjQ6\"]},\"contracts/extension/LazyMint.sol\":{\"keccak256\":\"0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827\",\"dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9\"]},\"contracts/extension/Multicall.sol\":{\"keccak256\":\"0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2\",\"dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg\"]},\"contracts/extension/OperatorFilterToggle.sol\":{\"keccak256\":\"0x7f4a59c3d0cd32b1b22a87eeaf74f395e8c56b2729e2418960c4c6dbfaf70329\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://193acd7afa57a8410ff53978c316114df95268a22601862acab8f60f695b52ac\",\"dweb:/ipfs/QmQx3Ary3ZEo9EKZ53W81rVP9dUGX4vxsB6UbFUNk3vfzA\"]},\"contracts/extension/OperatorFilterer.sol\":{\"keccak256\":\"0x07cd43aa984894eb75eeb89625b1473f32da42294cd9f122ca0730a5dfa661d5\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://3e25985648a00dd2df05c827a819f21b30ad496ed0053a7c31aeab01666ec69e\",\"dweb:/ipfs/QmZt9RPr7hxV3txHhFp7Gt7eJsTda3yFfTTe23i3csRudf\"]},\"contracts/extension/Ownable.sol\":{\"keccak256\":\"0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782\",\"dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ\"]},\"contracts/extension/Royalty.sol\":{\"keccak256\":\"0xcc3110048db91d4ecd05afcc6721fce6ade5eee8c2da0af8955e86ece8754350\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a1e830502fda46ab7618b65e155341d42bf007717edb27711b09bf6250ce1485\",\"dweb:/ipfs/QmY5fKpg7aCubR7fENu9htRFspU8hpSo7CVUNJxQdh8kv1\"]},\"contracts/extension/interface/IClaimableERC721.sol\":{\"keccak256\":\"0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929\",\"dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y\"]},\"contracts/extension/interface/IContractMetadata.sol\":{\"keccak256\":\"0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a\",\"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr\"]},\"contracts/extension/interface/IDelayedReveal.sol\":{\"keccak256\":\"0xbbe98263ebce49f81cb42f8bf1e7e631afd81cda73be79b907e81a2f54fd2123\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://76913c2086e309c97ac0d5be72bbe23e66fe35e231c75318993c14e6aa4c0138\",\"dweb:/ipfs/QmXwr49U275Cam8x9mYcNdcCmZHUYuBge3CtFPkBkEMzL4\"]},\"contracts/extension/interface/ILazyMint.sol\":{\"keccak256\":\"0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3\",\"dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA\"]},\"contracts/extension/interface/IMulticall.sol\":{\"keccak256\":\"0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca\",\"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar\"]},\"contracts/extension/interface/IOperatorFilterRegistry.sol\":{\"keccak256\":\"0xd43ac6f703d7692f51537838fcee1a17a6d1414a5965c41351f147b211d0d2da\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://cbfa4ac6486f17865b1f28cdbc93d89a268988aecd75435f15cf2c74d6f04e34\",\"dweb:/ipfs/QmQcBAWV5d3cD4z7euEasc6WYYTpkS1eHHEF1bVk6nbhSg\"]},\"contracts/extension/interface/IOperatorFilterToggle.sol\":{\"keccak256\":\"0xff05e83218d75f27210f20357d27849a2963b82830ca673a25c787f14b4203b1\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://36434c142d2e2f74a826f1240f8c12432eba0924fa7c888514592c46d4071674\",\"dweb:/ipfs/QmYntnzMvf6Duc9yhFyP4eheicbfUvBGcaXde9xqCrXPan\"]},\"contracts/extension/interface/IOwnable.sol\":{\"keccak256\":\"0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9\",\"dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC\"]},\"contracts/extension/interface/IRoyalty.sol\":{\"keccak256\":\"0x13912ba3970fdedd1eb5bf8bf0bcc5e64e43f2cadb8d22c3d6fb695fd9877385\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://b84d19df7aa9cb7460cca50ab050cdcfffb62f53c246daf35df276cad7088e9b\",\"dweb:/ipfs/QmNPPHJuiW1KCcq3aXELnA4X8NaSPM9S2vHbsBEEDYiwP8\"]},\"contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623\",\"dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6\"]},\"contracts/external-deps/openzeppelin/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/lib/TWAddress.sol\":{\"keccak256\":\"0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e\",\"dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6\"]},\"contracts/lib/TWStrings.sol\":{\"keccak256\":\"0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8\",\"license\":\"Apache 2.0\",\"urls\":[\"bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9\",\"dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_defaultAdmin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "_royaltyBps",
              "type": "uint128"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApprovalToCurrentOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ApproveToCaller"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "BalanceQueryForZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "MintZeroQuantity"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "OperatorNotAllowed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "OwnerQueryForNonexistentToken"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferCallerNotOwnerNorApproved"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferFromIncorrectOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToNonERC721ReceiverImplementer"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "TransferToZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "URIQueryForNonexistentToken"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "prevURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "newURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContractURIUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "newRoyaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "DefaultRoyalty",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "restriction",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "OperatorRestriction",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "prevOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnerUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "royaltyRecipient",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "royaltyBps",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RoyaltyForToken",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokenURIRevealed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "quantityClaimed",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "startTokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "endTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "string",
              "name": "baseURI",
              "type": "string",
              "indexed": false
            },
            {
              "internalType": "bytes",
              "name": "encryptedBaseURI",
              "type": "bytes",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TokensLazyMinted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OPERATOR_FILTER_REGISTRY",
          "outputs": [
            {
              "internalType": "contract IOperatorFilterRegistry",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "claim"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "contractURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "key",
              "type": "bytes"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "encryptDecrypt",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "result",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "encryptedData",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getBaseURICount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getBatchIdAtIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDefaultRoyaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_batchId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_key",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRevealURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyInfoForToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "",
              "type": "uint16"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_batchId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isEncryptedBatch",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "_baseURIForTokens",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "_data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "lazyMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "batchId",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToClaim",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nextTokenIdToMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "operatorRestriction",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_key",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "reveal",
          "outputs": [
            {
              "internalType": "string",
              "name": "revealedURI",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "_uri",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setContractURI"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_royaltyRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_royaltyBps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDefaultRoyaltyInfo"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_restriction",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOperatorRestriction"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setOwner"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "_recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_bps",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRoyaltyInfoForToken"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_subscription",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "subscribeToRegistry"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyClaim"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {ERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "burn(uint256)": {
            "details": "ERC721A's `_burn(uint256,bool)` internally checks for token approvals.",
            "params": {
              "_tokenId": "The tokenId of the NFT to burn."
            }
          },
          "claim(address,uint256)": {
            "details": "The logic in `verifyClaim` determines whether the caller is authorized to mint NFTs.                   The logic in `transferTokensOnClaim` does actual minting of tokens,                   can also be used to apply other state changes.",
            "params": {
              "_quantity": "The number of NFTs to mint.",
              "_receiver": "The recipient of the NFT to mint."
            }
          },
          "encryptDecrypt(bytes,bytes)": {
            "details": "Encrypt/decrypt given `data` with `key`. Uses inline assembly.                  See: https://ethereum.stackexchange.com/questions/69825/decrypt-message-on-chain",
            "params": {
              "data": "Bytes of data to encrypt/decrypt.",
              "key": "Secure key used by caller for encryption/decryption."
            },
            "returns": {
              "result": " Output after encryption/decryption of given data."
            }
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "getBaseURICount()": {
            "details": "Each batch of tokens has an in ID and an associated `baseURI`.                  See {batchIds}."
          },
          "getBatchIdAtIndex(uint256)": {
            "details": "See {getBaseURICount}.",
            "params": {
              "_index": "ID of a token."
            }
          },
          "getRevealURI(uint256,bytes)": {
            "details": "Reveal encrypted base URI for `_batchId` with caller/admin's `_key` used for encryption.                      Reverts if there's no encrypted URI for `_batchId`.                      See {encryptDecrypt}.",
            "params": {
              "_batchId": "ID of the batch for which URI is being revealed.",
              "_key": "Secure key used by caller/admin for encryption of baseURI."
            },
            "returns": {
              "revealedURI": "Decrypted base URI."
            }
          },
          "getRoyaltyInfoForToken(uint256)": {
            "details": "Returns royalty recipient and bps for `_tokenId`.",
            "params": {
              "_tokenId": "The tokenID of the NFT for which to query royalty info."
            }
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "isEncryptedBatch(uint256)": {
            "details": "Returns `true` if `_batchId`'s base URI is encrypted.",
            "params": {
              "_batchId": "ID of a batch of NFTs."
            }
          },
          "lazyMint(uint256,string,bytes)": {
            "params": {
              "_amount": "The number of NFTs to lazy mint.",
              "_baseURIForTokens": "The placeholder base URI for the 'n' number of NFTs being lazy minted, where the                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.",
              "_data": "The encrypted base URI + provenance hash for the batch of NFTs being lazy minted."
            },
            "returns": {
              "batchId": "         A unique integer identifier for the batch of NFTs lazy minted together."
            }
          },
          "multicall(bytes[])": {
            "details": "Receives and executes a batch of function calls on this contract.",
            "params": {
              "data": "The bytes data that makes up the batch of function calls to execute."
            },
            "returns": {
              "results": "The bytes data that makes up the result of the batch of function calls executed."
            }
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "reveal(uint256,bytes)": {
            "params": {
              "_index": "The ID for the batch of delayed-reveal NFTs to reveal.",
              "_key": "The key with which the base URI for the relevant batch of NFTs was encrypted."
            }
          },
          "royaltyInfo(uint256,uint256)": {
            "details": "Returns royalty amount and recipient for `tokenId` and `salePrice`.",
            "params": {
              "salePrice": "Sale price of the token.",
              "tokenId": "The tokenID of the NFT for which to query royalty info."
            },
            "returns": {
              "receiver": "       Address of royalty recipient account.",
              "royaltyAmount": "  Royalty amount calculated at current royaltyBps value."
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {ERC721-_safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {ERC721-_safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {ERC721-setApprovalForAll}."
          },
          "setContractURI(string)": {
            "details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
            "params": {
              "_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
            }
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "details": "Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {DefaultRoyalty Event}; See {_setupDefaultRoyaltyInfo}.",
            "params": {
              "_royaltyBps": "Updated royalty bps.",
              "_royaltyRecipient": "Address to be set as default royalty recipient."
            }
          },
          "setOwner(address)": {
            "params": {
              "_newOwner": "The address to set as the new owner of the contract."
            }
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "details": "Sets royalty info for `_tokenId`. Caller should be authorized to set royalty info.                  See {_canSetRoyaltyInfo}.                  Emits {RoyaltyForToken Event}; See {_setupRoyaltyInfoForToken}.",
            "params": {
              "_bps": "Updated royalty bps for the token Id.",
              "_recipient": "Address to be set as royalty recipient for given token Id."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See ERC165: https://eips.ethereum.org/EIPS/eip-165"
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenURI(uint256)": {
            "details": "See `BatchMintMetadata` for handling of metadata in this contract.",
            "params": {
              "_tokenId": "The tokenId of an NFT."
            }
          },
          "totalSupply()": {
            "details": "Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {ERC721-_transferFrom}."
          },
          "verifyClaim(address,uint256)": {
            "details": "Checks a request to claim NFTs against a custom condition.",
            "params": {
              "_claimer": "Caller of the claim function.",
              "_quantity": "The number of NFTs being claimed."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "burn(uint256)": {
            "notice": "Lets an owner or approved operator burn the NFT of the given tokenId."
          },
          "claim(address,uint256)": {
            "notice": "Lets an address claim multiple lazy minted NFTs at once to a recipient.                   This function prevents any reentrant calls, and is not allowed to be overridden.                   Contract creators should override `verifyClaim` and `transferTokensOnClaim`                   functions to create custom logic for verification and claiming,                   for e.g. price collection, allowlist, max quantity, etc."
          },
          "contractURI()": {
            "notice": "Returns the contract metadata URI."
          },
          "encryptDecrypt(bytes,bytes)": {
            "notice": "Encrypt/decrypt data on chain."
          },
          "getBaseURICount()": {
            "notice": "Returns the count of batches of NFTs."
          },
          "getBatchIdAtIndex(uint256)": {
            "notice": "Returns the ID for the batch of tokens the given tokenId belongs to."
          },
          "getDefaultRoyaltyInfo()": {
            "notice": "Returns the defualt royalty recipient and BPS for this contract's NFTs."
          },
          "getRevealURI(uint256,bytes)": {
            "notice": "Returns revealed URI for a batch of NFTs."
          },
          "getRoyaltyInfoForToken(uint256)": {
            "notice": "View royalty info for a given token."
          },
          "isEncryptedBatch(uint256)": {
            "notice": "Returns whether the relvant batch of NFTs is subject to a delayed reveal."
          },
          "lazyMint(uint256,string,bytes)": {
            "notice": "Lets an authorized address lazy mint a given amount of NFTs."
          },
          "multicall(bytes[])": {
            "notice": "Receives and executes a batch of function calls on this contract."
          },
          "nextTokenIdToClaim()": {
            "notice": "The tokenId assigned to the next new NFT to be claimed."
          },
          "nextTokenIdToMint()": {
            "notice": "The tokenId assigned to the next new NFT to be lazy minted."
          },
          "owner()": {
            "notice": "Returns the owner of the contract."
          },
          "reveal(uint256,bytes)": {
            "notice": "Lets an authorized address reveal a batch of delayed reveal NFTs."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "View royalty info for a given token and sale price."
          },
          "setContractURI(string)": {
            "notice": "Lets a contract admin set the URI for contract-level metadata."
          },
          "setDefaultRoyaltyInfo(address,uint256)": {
            "notice": "Updates default royalty recipient and bps."
          },
          "setOwner(address)": {
            "notice": "Lets an authorized wallet set a new owner for the contract."
          },
          "setRoyaltyInfoForToken(uint256,address,uint256)": {
            "notice": "Updates default royalty recipient and bps for a particular token."
          },
          "tokenURI(uint256)": {
            "notice": "Returns the metadata URI for an NFT."
          },
          "verifyClaim(address,uint256)": {
            "notice": "Override this function to add logic for claim verification, based on conditions                   such as allowlist, price, max quantity etc."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@chainlink/=lib/chainlink/",
        "@ds-test/=lib/ds-test/src/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@std/=lib/forge-std/src/",
        "@thirdweb-dev/dynamic-contracts/=lib/dynamic-contracts/",
        "ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/",
        "contracts/=contracts/",
        "ds-test/=lib/ds-test/src/",
        "dynamic-contracts/=lib/dynamic-contracts/src/",
        "erc4626-tests/=lib/chainlink/contracts/foundry-lib/openzeppelin-contracts/lib/erc4626-tests/",
        "erc721a-upgradeable/=lib/ERC721A-Upgradeable/",
        "erc721a/=lib/ERC721A/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 20
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/base/ERC721DelayedReveal.sol": "ERC721DelayedReveal"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/base/ERC721DelayedReveal.sol": {
        "keccak256": "0x26fb990be42644a7287f807cd60cd3b3e7249d763c377a57fa6c90c1202b1b7b",
        "urls": [
          "bzz-raw://d91555f6d1c79ef4da8b5407b5da65c62557ae0be9118dba4ddad7e6b240804c",
          "dweb:/ipfs/QmZqHCkKVybfra1hmPNtsyqwUFgtyF3VtfY99upLNCQUAj"
        ],
        "license": "Apache-2.0"
      },
      "contracts/base/ERC721LazyMint.sol": {
        "keccak256": "0xfb72132942d42950b16d0fcafdbebff87f7e7f42f6b4c9ca6fec4b8a27a3bbaf",
        "urls": [
          "bzz-raw://525fad027b1a6f19f94a68b04ac7d2cdade6e943b9f9d7e51b47187dd0447d2f",
          "dweb:/ipfs/QmfXZn34Yg4ZoM21n74oP6QrBtczbUotjD6VQf12kLmkpD"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/ERC165.sol": {
        "keccak256": "0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b",
        "urls": [
          "bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c",
          "dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr"
        ],
        "license": "MIT"
      },
      "contracts/eip/ERC721AVirtualApprove.sol": {
        "keccak256": "0xbc6fe5974d321406155a86d7f29748cad13fe632b5012e2d4979ccf238538516",
        "urls": [
          "bzz-raw://d80796f25af8c6507cd1f663c040d4e0c4b09f9d03544b50ead0d36cbbd5ea22",
          "dweb:/ipfs/QmPA5KLaxvbLbPbovSvMMgpj3H2Kj6kUU3s2V5qsgpfqGA"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC165.sol": {
        "keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
        "urls": [
          "bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
          "dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC2981.sol": {
        "keccak256": "0x7886c17b1bc3df885201378fd070d2f00d05fa54f20f7daf10382ec6ff4bd0c9",
        "urls": [
          "bzz-raw://a0802623ba9555f6d186bab5fd139203b643e88ea31d78f4f05cddd4008ac6cf",
          "dweb:/ipfs/QmYbqzSKkKmF2xYeH1zGNewBDNAhukuaZEUVAvYgnKt1He"
        ],
        "license": "Apache 2.0"
      },
      "contracts/eip/interface/IERC721.sol": {
        "keccak256": "0xbd9f2dd131e8f1e4e50b1b116eae917510ab9bf5d4356de37c5daf4cffdfa049",
        "urls": [
          "bzz-raw://8ac3530b317083464271b100de1976ed9179b9e7d5a4fc3d992c61c80676a676",
          "dweb:/ipfs/QmUq1AVzymvp7Y8H1eypGEGU4icjzn5vDSvKMNpXnoaeMT"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721A.sol": {
        "keccak256": "0xba8dd210c2a35a4e82cfc1e6586a3033fe337e40c23798793d7c8cd31694e0cd",
        "urls": [
          "bzz-raw://368eedd471b0aa41e83c2233aba9939ce25daae28de6b5ab427399ac91140eb8",
          "dweb:/ipfs/QmeMQTGpAGN4YZV8GPjrZr4zUtQ9Macsaset3FFY5CBVP5"
        ],
        "license": "MIT"
      },
      "contracts/eip/interface/IERC721Metadata.sol": {
        "keccak256": "0x7f80ade420dd9bf39c4dbca10484b625e2096ee332c22a00e658148f170ee5fb",
        "urls": [
          "bzz-raw://7bcac290ef069b09e887e6c80af6a77c23e935bc271622585f61339779ac485e",
          "dweb:/ipfs/QmbqzDQ2pCtKrJcD7LJcBDUX6nfmx2YtcTDAhi3noX5rc4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/eip/interface/IERC721Receiver.sol": {
        "keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
        "urls": [
          "bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
          "dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
        ],
        "license": "MIT"
      },
      "contracts/extension/BatchMintMetadata.sol": {
        "keccak256": "0xc0aa1014d8e7dac53199204ea1e95d2488ad5aa85420d97853d3f8dee96f5f67",
        "urls": [
          "bzz-raw://e7ebb973ce9804b0ef03b0a6336dd4da4ace59543ab499fe84ba60f8495ee8d7",
          "dweb:/ipfs/Qmdee8gPVFtQ6sP44bRdtKVkykm8Q41bpxfFrPfXkaxRt5"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/ContractMetadata.sol": {
        "keccak256": "0xf53ab08ec3057056872c15e35a5610f7a43426bd2829786aed006d527177adfe",
        "urls": [
          "bzz-raw://ee132ae5efdd372152febfcd8fd3a7cb82c7019367d92c886f5096003a79f392",
          "dweb:/ipfs/QmRW1cGWmZAu57huZpTUwsWB8AxUFrBp6g4NqozXpbWsR6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/DefaultOperatorFilterer.sol": {
        "keccak256": "0xbd2d5c15430a1428c354148f46472ada3b5fc741c5dfc095b29b21c31bc6733a",
        "urls": [
          "bzz-raw://5ed920e97d76272b856f6a61af2bd57037baa546cf8e37b52dd924103f0cf0bd",
          "dweb:/ipfs/QmWfgfUzpmF2Mcfwr7GFrDJPzYTUmUmg8DusFt9VLdrbVt"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/DelayedReveal.sol": {
        "keccak256": "0x2a860e4b857617a1c87c5fb79df2dd4a70e0e63ec6796f58ce9d0b3b93f1e242",
        "urls": [
          "bzz-raw://cc4039ae41d23b921c13b500018e333d63dd9b3be65e700e0d05465d3ac680a3",
          "dweb:/ipfs/QmSLCVWqjVzDt9ygXmBffERFCYCo7RiGry2BhQjXcnZjQ6"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/LazyMint.sol": {
        "keccak256": "0xe88710d7f2ac2834be6ed3c2bff1314f0d9c8c65aec7d05df9a6381d48a6f170",
        "urls": [
          "bzz-raw://c4734764afb84ecb1c5a99a441296a38f524c602227d0eae9bca3b325c895827",
          "dweb:/ipfs/QmWbwqzY6SqgitawoYeZmHiFvW6dp2fHoQfnb9WuVNr6E9"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Multicall.sol": {
        "keccak256": "0x737a71c74307fa360863550d64bbaef599bbcb47829b19c3743ed1ff22b9af55",
        "urls": [
          "bzz-raw://7e82a79ee183dffa3ec01faac0907e04d72a185e55b7c24bff8e8e952b05f4c2",
          "dweb:/ipfs/QmQ9neZqpcgJtGgm84FBzMqFntZ1Sk1KFTWhjCMq8vnKDg"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/OperatorFilterToggle.sol": {
        "keccak256": "0x7f4a59c3d0cd32b1b22a87eeaf74f395e8c56b2729e2418960c4c6dbfaf70329",
        "urls": [
          "bzz-raw://193acd7afa57a8410ff53978c316114df95268a22601862acab8f60f695b52ac",
          "dweb:/ipfs/QmQx3Ary3ZEo9EKZ53W81rVP9dUGX4vxsB6UbFUNk3vfzA"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/OperatorFilterer.sol": {
        "keccak256": "0x07cd43aa984894eb75eeb89625b1473f32da42294cd9f122ca0730a5dfa661d5",
        "urls": [
          "bzz-raw://3e25985648a00dd2df05c827a819f21b30ad496ed0053a7c31aeab01666ec69e",
          "dweb:/ipfs/QmZt9RPr7hxV3txHhFp7Gt7eJsTda3yFfTTe23i3csRudf"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/Ownable.sol": {
        "keccak256": "0x45447691686861237d5e1acb9d723d861a3fb3d561335e4f385d1547f25e27a5",
        "urls": [
          "bzz-raw://5142293e36c736f744c73aaecab5f7be8e2d5ac70acc67851e0cea5171fd6782",
          "dweb:/ipfs/QmVJT5B84o5vFc5E2VteZdBhrT1HMutc7Ax72UKD1aZatJ"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/Royalty.sol": {
        "keccak256": "0xcc3110048db91d4ecd05afcc6721fce6ade5eee8c2da0af8955e86ece8754350",
        "urls": [
          "bzz-raw://a1e830502fda46ab7618b65e155341d42bf007717edb27711b09bf6250ce1485",
          "dweb:/ipfs/QmY5fKpg7aCubR7fENu9htRFspU8hpSo7CVUNJxQdh8kv1"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IClaimableERC721.sol": {
        "keccak256": "0x867213bc7e2ad03ab3a1bc6f7bb4928ef9dbf2f80007f2db330703c62c24e960",
        "urls": [
          "bzz-raw://3df6a8ffcfb67316f7c5f142542098c4ab6276902cda76e3ed3e7080b96dd929",
          "dweb:/ipfs/QmaT2N7Y4sg2h9Weyp3ASnbAdiFEoqSRhdAciweEoGxj9Y"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IContractMetadata.sol": {
        "keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
        "urls": [
          "bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
          "dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IDelayedReveal.sol": {
        "keccak256": "0xbbe98263ebce49f81cb42f8bf1e7e631afd81cda73be79b907e81a2f54fd2123",
        "urls": [
          "bzz-raw://76913c2086e309c97ac0d5be72bbe23e66fe35e231c75318993c14e6aa4c0138",
          "dweb:/ipfs/QmXwr49U275Cam8x9mYcNdcCmZHUYuBge3CtFPkBkEMzL4"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/ILazyMint.sol": {
        "keccak256": "0x480953502a40e438d855392e322adc0369e2109f6d46fb9ec2bb3ad0afbb0aec",
        "urls": [
          "bzz-raw://2b3bb332d4f5e38f9786b00564ad417e48c689b4a92a60888c3845b986c995a3",
          "dweb:/ipfs/QmPVM4KTUeLD7uVCfP8MBQNRo7pU8xF3rXQuDcx3C6cLxA"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IMulticall.sol": {
        "keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
        "urls": [
          "bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
          "dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
        ],
        "license": "MIT"
      },
      "contracts/extension/interface/IOperatorFilterRegistry.sol": {
        "keccak256": "0xd43ac6f703d7692f51537838fcee1a17a6d1414a5965c41351f147b211d0d2da",
        "urls": [
          "bzz-raw://cbfa4ac6486f17865b1f28cdbc93d89a268988aecd75435f15cf2c74d6f04e34",
          "dweb:/ipfs/QmQcBAWV5d3cD4z7euEasc6WYYTpkS1eHHEF1bVk6nbhSg"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/interface/IOperatorFilterToggle.sol": {
        "keccak256": "0xff05e83218d75f27210f20357d27849a2963b82830ca673a25c787f14b4203b1",
        "urls": [
          "bzz-raw://36434c142d2e2f74a826f1240f8c12432eba0924fa7c888514592c46d4071674",
          "dweb:/ipfs/QmYntnzMvf6Duc9yhFyP4eheicbfUvBGcaXde9xqCrXPan"
        ],
        "license": "Apache 2.0"
      },
      "contracts/extension/interface/IOwnable.sol": {
        "keccak256": "0xd659a64da6264fdd50ee379be032fea4917eba4fadfd6d366107fb17e46907f3",
        "urls": [
          "bzz-raw://c15940c4a3d229f4fdd1226fe297a58fde10b07b86a34de1ed11a8802dd5dea9",
          "dweb:/ipfs/QmS8p8CxWiahLkYsCWNhFjCnmQzuc4ck3kjYYuCFj8LsmC"
        ],
        "license": "Apache-2.0"
      },
      "contracts/extension/interface/IRoyalty.sol": {
        "keccak256": "0x13912ba3970fdedd1eb5bf8bf0bcc5e64e43f2cadb8d22c3d6fb695fd9877385",
        "urls": [
          "bzz-raw://b84d19df7aa9cb7460cca50ab050cdcfffb62f53c246daf35df276cad7088e9b",
          "dweb:/ipfs/QmNPPHJuiW1KCcq3aXELnA4X8NaSPM9S2vHbsBEEDYiwP8"
        ],
        "license": "Apache-2.0"
      },
      "contracts/external-deps/openzeppelin/security/ReentrancyGuard.sol": {
        "keccak256": "0x2030bba0e41fb3daead24cdba39cd9d8ce2748de68e57f1c811420419a739afb",
        "urls": [
          "bzz-raw://1a64e19e10d66555abcf0b5392bb27f9e65f674d7688761f02f2c8b508490623",
          "dweb:/ipfs/QmNhMchAD6kuHFAAgdwCwuNUS3uaUD2gwofT5kxQAQeWH6"
        ],
        "license": "MIT"
      },
      "contracts/external-deps/openzeppelin/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "contracts/lib/TWAddress.sol": {
        "keccak256": "0x460f032cf3bf43d586e126ab2ec8be4335767f497ccb699741546a1cfba94a7e",
        "urls": [
          "bzz-raw://28fcbf6dde6c2eeb9864f6ec6f21dcc81ec426877debf4b912f2f3bc5b0fc91e",
          "dweb:/ipfs/QmS1SHrZDfefX8EE7DdvszTY6VPCHydf4HM7NKJ2gP72e6"
        ],
        "license": "Apache 2.0"
      },
      "contracts/lib/TWStrings.sol": {
        "keccak256": "0xef7e9954d888f99baffc10db1d9bf6a2beb66c842d81dea90352ddded22cbbf8",
        "urls": [
          "bzz-raw://832415134684f5413f9d0f3f5536aa30848690cfe54769f7730a3807438f3bf9",
          "dweb:/ipfs/QmduTiUdtsnyJVMXpdomohEWDVg46aZhnS9uTURu4x1NYt"
        ],
        "license": "Apache 2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/base/ERC721DelayedReveal.sol",
    "id": 4622,
    "exportedSymbols": {
      "BatchMintMetadata": [
        18037
      ],
      "ContractMetadata": [
        18264
      ],
      "DefaultOperatorFilterer": [
        18303
      ],
      "DelayedReveal": [
        18503
      ],
      "ERC721A": [
        13082
      ],
      "ERC721DelayedReveal": [
        4621
      ],
      "ERC721LazyMint": [
        5704
      ],
      "IClaimableERC721": [
        33177
      ],
      "IContractMetadata": [
        33216
      ],
      "IDelayedReveal": [
        33247
      ],
      "IERC165": [
        14687
      ],
      "IERC2981": [
        14831
      ],
      "ILazyMint": [
        33591
      ],
      "IMulticall": [
        33705
      ],
      "IOwnable": [
        33955
      ],
      "IRoyalty": [
        34181
      ],
      "LazyMint": [
        21079
      ],
      "Multicall": [
        21413
      ],
      "OperatorFilterer": [
        21689
      ],
      "Ownable": [
        21941
      ],
      "ReentrancyGuard": [
        47047
      ],
      "Royalty": [
        23183
      ],
      "TWAddress": [
        64017
      ],
      "TWStrings": [
        64717
      ]
    },
    "nodeType": "SourceUnit",
    "src": "39:4738:12",
    "nodes": [
      {
        "id": 4424,
        "nodeType": "PragmaDirective",
        "src": "39:23:12",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 4425,
        "nodeType": "ImportDirective",
        "src": "86:30:12",
        "nodes": [],
        "absolutePath": "contracts/base/ERC721LazyMint.sol",
        "file": "./ERC721LazyMint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4622,
        "sourceUnit": 5705,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4426,
        "nodeType": "ImportDirective",
        "src": "118:40:12",
        "nodes": [],
        "absolutePath": "contracts/extension/DelayedReveal.sol",
        "file": "../extension/DelayedReveal.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 4622,
        "sourceUnit": 18504,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 4621,
        "nodeType": "ContractDefinition",
        "src": "979:3797:12",
        "nodes": [
          {
            "id": 4434,
            "nodeType": "UsingForDirective",
            "src": "1047:28:12",
            "nodes": [],
            "libraryName": {
              "id": 4432,
              "name": "TWStrings",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 64717,
              "src": "1053:9:12"
            },
            "typeName": {
              "id": 4433,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1067:7:12",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "id": 4455,
            "nodeType": "FunctionDefinition",
            "src": "1260:253:12",
            "nodes": [],
            "body": {
              "id": 4454,
              "nodeType": "Block",
              "src": "1511:2:12",
              "nodes": [],
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 4447,
                    "name": "_defaultAdmin",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4436,
                    "src": "1448:13:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "id": 4448,
                    "name": "_name",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4438,
                    "src": "1463:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 4449,
                    "name": "_symbol",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4440,
                    "src": "1470:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  {
                    "id": 4450,
                    "name": "_royaltyRecipient",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4442,
                    "src": "1479:17:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  {
                    "id": 4451,
                    "name": "_royaltyBps",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4444,
                    "src": "1498:11:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  }
                ],
                "id": 4452,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 4446,
                  "name": "ERC721LazyMint",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 5704,
                  "src": "1433:14:12"
                },
                "nodeType": "ModifierInvocation",
                "src": "1433:77:12"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 4445,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4436,
                  "mutability": "mutable",
                  "name": "_defaultAdmin",
                  "nameLocation": "1289:13:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4455,
                  "src": "1281:21:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4435,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1281:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4438,
                  "mutability": "mutable",
                  "name": "_name",
                  "nameLocation": "1326:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4455,
                  "src": "1312:19:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4437,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1312:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4440,
                  "mutability": "mutable",
                  "name": "_symbol",
                  "nameLocation": "1355:7:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4455,
                  "src": "1341:21:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4439,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1341:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4442,
                  "mutability": "mutable",
                  "name": "_royaltyRecipient",
                  "nameLocation": "1380:17:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4455,
                  "src": "1372:25:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 4441,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1372:7:12",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4444,
                  "mutability": "mutable",
                  "name": "_royaltyBps",
                  "nameLocation": "1415:11:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4455,
                  "src": "1407:19:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint128",
                    "typeString": "uint128"
                  },
                  "typeName": {
                    "id": 4443,
                    "name": "uint128",
                    "nodeType": "ElementaryTypeName",
                    "src": "1407:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint128",
                      "typeString": "uint128"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1271:161:12"
            },
            "returnParameters": {
              "id": 4453,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1511:0:12"
            },
            "scope": 4621,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 4503,
            "nodeType": "FunctionDefinition",
            "src": "1927:410:12",
            "nodes": [],
            "body": {
              "id": 4502,
              "nodeType": "Block",
              "src": "2016:321:12",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    4465,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4465,
                      "mutability": "mutable",
                      "name": "batchId",
                      "nameLocation": "2035:7:12",
                      "nodeType": "VariableDeclaration",
                      "scope": 4502,
                      "src": "2027:15:12",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4464,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2027:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 4469,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4467,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4458,
                        "src": "2060:8:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4466,
                      "name": "_getBatchId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17933,
                      "src": "2048:11:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256,uint256)"
                      }
                    },
                    "id": 4468,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2048:21:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                      "typeString": "tuple(uint256,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2026:43:12"
                },
                {
                  "assignments": [
                    4471
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4471,
                      "mutability": "mutable",
                      "name": "batchUri",
                      "nameLocation": "2093:8:12",
                      "nodeType": "VariableDeclaration",
                      "scope": 4502,
                      "src": "2079:22:12",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 4470,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2079:6:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4475,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4473,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4458,
                        "src": "2116:8:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4472,
                      "name": "_getBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17984,
                      "src": "2104:11:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) view returns (string memory)"
                      }
                    },
                    "id": 4474,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2104:21:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2079:46:12"
                },
                {
                  "condition": {
                    "arguments": [
                      {
                        "id": 4477,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4465,
                        "src": "2157:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4476,
                      "name": "isEncryptedBatch",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18502,
                      "src": "2140:16:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 4478,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2140:25:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 4500,
                    "nodeType": "Block",
                    "src": "2244:87:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 4493,
                                  "name": "batchUri",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4471,
                                  "src": "2289:8:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "id": 4494,
                                      "name": "_tokenId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4458,
                                      "src": "2299:8:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 4495,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "toString",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 64599,
                                    "src": "2299:17:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 4496,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "2299:19:12",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 4491,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2272:3:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 4492,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "2272:16:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 4497,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2272:47:12",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 4490,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2265:6:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 4489,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2265:6:12",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4498,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2265:55:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 4463,
                        "id": 4499,
                        "nodeType": "Return",
                        "src": "2258:62:12"
                      }
                    ]
                  },
                  "id": 4501,
                  "nodeType": "IfStatement",
                  "src": "2136:195:12",
                  "trueBody": {
                    "id": 4488,
                    "nodeType": "Block",
                    "src": "2167:71:12",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 4483,
                                  "name": "batchUri",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4471,
                                  "src": "2212:8:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 4484,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2222:3:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                    "typeString": "literal_string \"0\""
                                  }
                                ],
                                "expression": {
                                  "id": 4481,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -1,
                                  "src": "2195:3:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 4482,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "2195:16:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 4485,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2195:31:12",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 4480,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "2188:6:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 4479,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "2188:6:12",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 4486,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2188:39:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 4463,
                        "id": 4487,
                        "nodeType": "Return",
                        "src": "2181:46:12"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              5416
            ],
            "documentation": {
              "id": 4456,
              "nodeType": "StructuredDocumentation",
              "src": "1705:217:12",
              "text": "  @notice         Returns the metadata URI for an NFT.\n  @dev            See `BatchMintMetadata` for handling of metadata in this contract.\n  @param _tokenId The tokenId of an NFT."
            },
            "functionSelector": "c87b56dd",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tokenURI",
            "nameLocation": "1936:8:12",
            "overrides": {
              "id": 4460,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1983:8:12"
            },
            "parameters": {
              "id": 4459,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4458,
                  "mutability": "mutable",
                  "name": "_tokenId",
                  "nameLocation": "1953:8:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4503,
                  "src": "1945:16:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4457,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1945:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1944:18:12"
            },
            "returnParameters": {
              "id": 4463,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4462,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4503,
                  "src": "2001:13:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4461,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2001:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2000:15:12"
            },
            "scope": 4621,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4561,
            "nodeType": "FunctionDefinition",
            "src": "3144:548:12",
            "nodes": [],
            "body": {
              "id": 4560,
              "nodeType": "Block",
              "src": "3316:376:12",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 4519,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4516,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4510,
                        "src": "3330:5:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "id": 4517,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "3330:12:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "30",
                      "id": 4518,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3345:1:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "3330:16:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 4552,
                  "nodeType": "IfStatement",
                  "src": "3326:293:12",
                  "trueBody": {
                    "id": 4551,
                    "nodeType": "Block",
                    "src": "3348:271:12",
                    "statements": [
                      {
                        "assignments": [
                          4521,
                          4523
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 4521,
                            "mutability": "mutable",
                            "name": "encryptedURI",
                            "nameLocation": "3376:12:12",
                            "nodeType": "VariableDeclaration",
                            "scope": 4551,
                            "src": "3363:25:12",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 4520,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "3363:5:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 4523,
                            "mutability": "mutable",
                            "name": "provenanceHash",
                            "nameLocation": "3398:14:12",
                            "nodeType": "VariableDeclaration",
                            "scope": 4551,
                            "src": "3390:22:12",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 4522,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "3390:7:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 4533,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 4526,
                              "name": "_data",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4510,
                              "src": "3427:5:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              }
                            },
                            {
                              "components": [
                                {
                                  "id": 4528,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3435:5:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                    "typeString": "type(bytes storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 4527,
                                    "name": "bytes",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3435:5:12",
                                    "typeDescriptions": {}
                                  }
                                },
                                {
                                  "id": 4530,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3442:7:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes32_$",
                                    "typeString": "type(bytes32)"
                                  },
                                  "typeName": {
                                    "id": 4529,
                                    "name": "bytes32",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3442:7:12",
                                    "typeDescriptions": {}
                                  }
                                }
                              ],
                              "id": 4531,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "3434:16:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes32_$_$",
                                "typeString": "tuple(type(bytes storage pointer),type(bytes32))"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_calldata_ptr",
                                "typeString": "bytes calldata"
                              },
                              {
                                "typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_bytes32_$_$",
                                "typeString": "tuple(type(bytes storage pointer),type(bytes32))"
                              }
                            ],
                            "expression": {
                              "id": 4524,
                              "name": "abi",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -1,
                              "src": "3416:3:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_abi",
                                "typeString": "abi"
                              }
                            },
                            "id": 4525,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "decode",
                            "nodeType": "MemberAccess",
                            "src": "3416:10:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 4532,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3416:35:12",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_bytes32_$",
                            "typeString": "tuple(bytes memory,bytes32)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3362:89:12"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "id": 4541,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 4537,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "expression": {
                                "id": 4534,
                                "name": "encryptedURI",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4521,
                                "src": "3469:12:12",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 4535,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "3469:19:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "30",
                              "id": 4536,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3492:1:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "3469:24:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "&&",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "id": 4540,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 4538,
                              "name": "provenanceHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4523,
                              "src": "3497:14:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "hexValue": "",
                              "id": 4539,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3515:2:12",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                "typeString": "literal_string \"\""
                              },
                              "value": ""
                            },
                            "src": "3497:20:12",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "src": "3469:48:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 4550,
                        "nodeType": "IfStatement",
                        "src": "3465:144:12",
                        "trueBody": {
                          "id": 4549,
                          "nodeType": "Block",
                          "src": "3519:90:12",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 4545,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 4543,
                                      "name": "nextTokenIdToLazyMint",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 21013,
                                      "src": "3555:21:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "+",
                                    "rightExpression": {
                                      "id": 4544,
                                      "name": "_amount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4506,
                                      "src": "3579:7:12",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "3555:31:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "id": 4546,
                                    "name": "_data",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4510,
                                    "src": "3588:5:12",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_bytes_calldata_ptr",
                                      "typeString": "bytes calldata"
                                    }
                                  ],
                                  "id": 4542,
                                  "name": "_setEncryptedData",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 18370,
                                  "src": "3537:17:12",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                                    "typeString": "function (uint256,bytes memory)"
                                  }
                                },
                                "id": 4547,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3537:57:12",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 4548,
                              "nodeType": "ExpressionStatement",
                              "src": "3537:57:12"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4555,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4506,
                        "src": "3651:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4556,
                        "name": "_baseURIForTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4508,
                        "src": "3660:17:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        }
                      },
                      {
                        "id": 4557,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4510,
                        "src": "3679:5:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_calldata_ptr",
                          "typeString": "string calldata"
                        },
                        {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      ],
                      "expression": {
                        "id": 4553,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "3636:5:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_ERC721DelayedReveal_$4621_$",
                          "typeString": "type(contract super ERC721DelayedReveal)"
                        }
                      },
                      "id": 4554,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "lazyMint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 21072,
                      "src": "3636:14:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_uint256_$",
                        "typeString": "function (uint256,string calldata,bytes calldata) returns (uint256)"
                      }
                    },
                    "id": 4558,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3636:49:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 4515,
                  "id": 4559,
                  "nodeType": "Return",
                  "src": "3629:56:12"
                }
              ]
            },
            "baseFunctions": [
              21072
            ],
            "documentation": {
              "id": 4504,
              "nodeType": "StructuredDocumentation",
              "src": "2525:614:12",
              "text": "  @notice                  Lets an authorized address lazy mint a given amount of NFTs.\n  @param _amount           The number of NFTs to lazy mint.\n  @param _baseURIForTokens The placeholder base URI for the 'n' number of NFTs being lazy minted, where the\n                           metadata for each of those NFTs is `${baseURIForTokens}/${tokenId}`.\n  @param _data             The encrypted base URI + provenance hash for the batch of NFTs being lazy minted.\n  @return batchId          A unique integer identifier for the batch of NFTs lazy minted together."
            },
            "functionSelector": "d37c353b",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "lazyMint",
            "nameLocation": "3153:8:12",
            "overrides": {
              "id": 4512,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3281:8:12"
            },
            "parameters": {
              "id": 4511,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4506,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "3179:7:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4561,
                  "src": "3171:15:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4505,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3171:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4508,
                  "mutability": "mutable",
                  "name": "_baseURIForTokens",
                  "nameLocation": "3212:17:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4561,
                  "src": "3196:33:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_calldata_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4507,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "3196:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4510,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "3254:5:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4561,
                  "src": "3239:20:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4509,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3239:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3161:104:12"
            },
            "returnParameters": {
              "id": 4515,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4514,
                  "mutability": "mutable",
                  "name": "batchId",
                  "nameLocation": "3307:7:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4561,
                  "src": "3299:15:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4513,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3299:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3298:17:12"
            },
            "scope": 4621,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 4607,
            "nodeType": "FunctionDefinition",
            "src": "4170:413:12",
            "nodes": [],
            "body": {
              "id": 4606,
              "nodeType": "Block",
              "src": "4285:298:12",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 4573,
                          "name": "_canReveal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4620,
                          "src": "4303:10:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                            "typeString": "function () view returns (bool)"
                          }
                        },
                        "id": 4574,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4303:12:12",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f7420617574686f72697a6564",
                        "id": 4575,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4317:16:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
                          "typeString": "literal_string \"Not authorized\""
                        },
                        "value": "Not authorized"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_fac3bac318c0d00994f57b0f2f4c643c313072b71db2302bf4b900309cc50b36",
                          "typeString": "literal_string \"Not authorized\""
                        }
                      ],
                      "id": 4572,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "4295:7:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 4576,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4295:39:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4577,
                  "nodeType": "ExpressionStatement",
                  "src": "4295:39:12"
                },
                {
                  "assignments": [
                    4579
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 4579,
                      "mutability": "mutable",
                      "name": "batchId",
                      "nameLocation": "4353:7:12",
                      "nodeType": "VariableDeclaration",
                      "scope": 4606,
                      "src": "4345:15:12",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4578,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4345:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 4583,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 4581,
                        "name": "_index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4564,
                        "src": "4381:6:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 4580,
                      "name": "getBatchIdAtIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17872,
                      "src": "4363:17:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) view returns (uint256)"
                      }
                    },
                    "id": 4582,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4363:25:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4345:43:12"
                },
                {
                  "expression": {
                    "id": 4589,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 4584,
                      "name": "revealedURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4570,
                      "src": "4398:11:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 4586,
                          "name": "batchId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4579,
                          "src": "4425:7:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        {
                          "id": 4587,
                          "name": "_key",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4566,
                          "src": "4434:4:12",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          {
                            "typeIdentifier": "t_bytes_calldata_ptr",
                            "typeString": "bytes calldata"
                          }
                        ],
                        "id": 4585,
                        "name": "getRevealURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 18436,
                        "src": "4412:12:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_string_memory_ptr_$",
                          "typeString": "function (uint256,bytes calldata) view returns (string memory)"
                        }
                      },
                      "id": 4588,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4412:27:12",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "4398:41:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 4590,
                  "nodeType": "ExpressionStatement",
                  "src": "4398:41:12"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4592,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4579,
                        "src": "4468:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "hexValue": "",
                        "id": 4593,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4477:2:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "id": 4591,
                      "name": "_setEncryptedData",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18370,
                      "src": "4450:17:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,bytes memory)"
                      }
                    },
                    "id": 4594,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4450:30:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4595,
                  "nodeType": "ExpressionStatement",
                  "src": "4450:30:12"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 4597,
                        "name": "batchId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4579,
                        "src": "4502:7:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4598,
                        "name": "revealedURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4570,
                        "src": "4511:11:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 4596,
                      "name": "_setBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17999,
                      "src": "4490:11:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 4599,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4490:33:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4600,
                  "nodeType": "ExpressionStatement",
                  "src": "4490:33:12"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 4602,
                        "name": "_index",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4564,
                        "src": "4556:6:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 4603,
                        "name": "revealedURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4570,
                        "src": "4564:11:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 4601,
                      "name": "TokenURIRevealed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33226,
                      "src": "4539:16:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,string memory)"
                      }
                    },
                    "id": 4604,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4539:37:12",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 4605,
                  "nodeType": "EmitStatement",
                  "src": "4534:42:12"
                }
              ]
            },
            "baseFunctions": [
              33236
            ],
            "documentation": {
              "id": 4562,
              "nodeType": "StructuredDocumentation",
              "src": "3882:283:12",
              "text": "  @notice       Lets an authorized address reveal a batch of delayed reveal NFTs.\n  @param _index The ID for the batch of delayed-reveal NFTs to reveal.\n  @param _key   The key with which the base URI for the relevant batch of NFTs was encrypted."
            },
            "functionSelector": "ce805642",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "reveal",
            "nameLocation": "4179:6:12",
            "overrides": {
              "id": 4568,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4240:8:12"
            },
            "parameters": {
              "id": 4567,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4564,
                  "mutability": "mutable",
                  "name": "_index",
                  "nameLocation": "4194:6:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4607,
                  "src": "4186:14:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 4563,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4186:7:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 4566,
                  "mutability": "mutable",
                  "name": "_key",
                  "nameLocation": "4217:4:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4607,
                  "src": "4202:19:12",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 4565,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4202:5:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4185:37:12"
            },
            "returnParameters": {
              "id": 4571,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4570,
                  "mutability": "mutable",
                  "name": "revealedURI",
                  "nameLocation": "4272:11:12",
                  "nodeType": "VariableDeclaration",
                  "scope": 4607,
                  "src": "4258:25:12",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4569,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "4258:6:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4257:27:12"
            },
            "scope": 4621,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "id": 4620,
            "nodeType": "FunctionDefinition",
            "src": "4670:104:12",
            "nodes": [],
            "body": {
              "id": 4619,
              "nodeType": "Block",
              "src": "4729:45:12",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 4617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 4613,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "4746:3:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 4614,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "4746:10:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 4615,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21893,
                        "src": "4760:5:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                          "typeString": "function () view returns (address)"
                        }
                      },
                      "id": 4616,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4760:7:12",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4746:21:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 4612,
                  "id": 4618,
                  "nodeType": "Return",
                  "src": "4739:28:12"
                }
              ]
            },
            "documentation": {
              "id": 4608,
              "nodeType": "StructuredDocumentation",
              "src": "4589:76:12",
              "text": "@dev Checks whether NFTs can be revealed in the given execution context."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_canReveal",
            "nameLocation": "4679:10:12",
            "parameters": {
              "id": 4609,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4689:2:12"
            },
            "returnParameters": {
              "id": 4612,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 4611,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 4620,
                  "src": "4723:4:12",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 4610,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "4723:4:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4722:6:12"
            },
            "scope": 4621,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 4428,
              "name": "ERC721LazyMint",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 5704,
              "src": "1011:14:12"
            },
            "id": 4429,
            "nodeType": "InheritanceSpecifier",
            "src": "1011:14:12"
          },
          {
            "baseName": {
              "id": 4430,
              "name": "DelayedReveal",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 18503,
              "src": "1027:13:12"
            },
            "id": 4431,
            "nodeType": "InheritanceSpecifier",
            "src": "1027:13:12"
          }
        ],
        "canonicalName": "ERC721DelayedReveal",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 4427,
          "nodeType": "StructuredDocumentation",
          "src": "160:817:12",
          "text": "      BASE:      ERC721LazyMint\n      EXTENSION: DelayedReveal\n  The `ERC721DelayedReveal` contract uses the `ERC721LazyMint` contract, along with `DelayedReveal` extension.\n  'Lazy minting' means defining the metadata of NFTs without minting it to an address. Regular 'minting'\n  of  NFTs means actually assigning an owner to an NFT.\n  As a contract admin, this lets you prepare the metadata for NFTs that will be minted by an external party,\n  without paying the gas cost for actually minting the NFTs.\n  'Delayed reveal' is a mechanism by which you can distribute NFTs to your audience and reveal the metadata of the distributed\n  NFTs, after the fact.\n  You can read more about how the `DelayedReveal` extension works, here: https://blog.thirdweb.com/delayed-reveal-nfts"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          4621,
          18503,
          33247,
          5704,
          47047,
          18303,
          21689,
          21535,
          33932,
          33177,
          21079,
          18037,
          33591,
          23183,
          34181,
          14831,
          21941,
          33955,
          21413,
          33705,
          18264,
          33216,
          13082,
          15034,
          15080,
          14963,
          8680,
          14687,
          49046
        ],
        "name": "ERC721DelayedReveal",
        "nameLocation": "988:19:12",
        "scope": 4622,
        "usedErrors": [
          14975,
          14978,
          14981,
          14984,
          14987,
          14990,
          14993,
          14996,
          14999,
          15002,
          15005,
          15008,
          15011,
          21546
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 12
}